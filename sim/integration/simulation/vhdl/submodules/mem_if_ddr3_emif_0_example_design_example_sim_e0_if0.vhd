-- mem_if_ddr3_emif_0_example_design_example_sim_e0_if0.vhd

-- This file was auto-generated from alt_mem_if_ddr3_emif_hw.tcl.  If you edit it your changes
-- will probably be lost.
-- 
-- Generated using ACDS version 14.0 200 at 2016.05.21.21:51:06

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity mem_if_ddr3_emif_0_example_design_example_sim_e0_if0 is
	port (
		pll_ref_clk               : in    std_logic                      := '0';             --      pll_ref_clk.clk
		global_reset_n            : in    std_logic                      := '0';             --     global_reset.reset_n
		soft_reset_n              : in    std_logic                      := '0';             --       soft_reset.reset_n
		afi_clk                   : out   std_logic;                                         --          afi_clk.clk
		afi_half_clk              : out   std_logic;                                         --     afi_half_clk.clk
		afi_reset_n               : out   std_logic;                                         --        afi_reset.reset_n
		afi_reset_export_n        : out   std_logic;                                         -- afi_reset_export.reset_n
		mem_a                     : out   std_logic_vector(13 downto 0);                     --           memory.mem_a
		mem_ba                    : out   std_logic_vector(2 downto 0);                      --                 .mem_ba
		mem_ck                    : out   std_logic_vector(0 downto 0);                      --                 .mem_ck
		mem_ck_n                  : out   std_logic_vector(0 downto 0);                      --                 .mem_ck_n
		mem_cke                   : out   std_logic_vector(0 downto 0);                      --                 .mem_cke
		mem_cs_n                  : out   std_logic_vector(0 downto 0);                      --                 .mem_cs_n
		mem_dm                    : out   std_logic_vector(7 downto 0);                      --                 .mem_dm
		mem_ras_n                 : out   std_logic_vector(0 downto 0);                      --                 .mem_ras_n
		mem_cas_n                 : out   std_logic_vector(0 downto 0);                      --                 .mem_cas_n
		mem_we_n                  : out   std_logic_vector(0 downto 0);                      --                 .mem_we_n
		mem_reset_n               : out   std_logic;                                         --                 .mem_reset_n
		mem_dq                    : inout std_logic_vector(63 downto 0)  := (others => '0'); --                 .mem_dq
		mem_dqs                   : inout std_logic_vector(7 downto 0)   := (others => '0'); --                 .mem_dqs
		mem_dqs_n                 : inout std_logic_vector(7 downto 0)   := (others => '0'); --                 .mem_dqs_n
		mem_odt                   : out   std_logic_vector(0 downto 0);                      --                 .mem_odt
		avl_ready                 : out   std_logic;                                         --              avl.waitrequest_n
		avl_burstbegin            : in    std_logic                      := '0';             --                 .beginbursttransfer
		avl_addr                  : in    std_logic_vector(23 downto 0)  := (others => '0'); --                 .address
		avl_rdata_valid           : out   std_logic;                                         --                 .readdatavalid
		avl_rdata                 : out   std_logic_vector(511 downto 0);                    --                 .readdata
		avl_wdata                 : in    std_logic_vector(511 downto 0) := (others => '0'); --                 .writedata
		avl_be                    : in    std_logic_vector(63 downto 0)  := (others => '0'); --                 .byteenable
		avl_read_req              : in    std_logic                      := '0';             --                 .read
		avl_write_req             : in    std_logic                      := '0';             --                 .write
		avl_size                  : in    std_logic                      := '0';             --                 .burstcount
		local_init_done           : out   std_logic;                                         --           status.local_init_done
		local_cal_success         : out   std_logic;                                         --                 .local_cal_success
		local_cal_fail            : out   std_logic;                                         --                 .local_cal_fail
		local_refresh_req         : in    std_logic                      := '0';             --     user_refresh.local_refresh_req
		local_refresh_chip        : in    std_logic_vector(0 downto 0)   := (others => '0'); --                 .local_refresh_chip
		local_refresh_ack         : out   std_logic;                                         --                 .local_refresh_ack
		oct_rzqin                 : in    std_logic                      := '0';             --              oct.rzqin
		pll_mem_clk               : out   std_logic;                                         --      pll_sharing.pll_mem_clk
		pll_write_clk             : out   std_logic;                                         --                 .pll_write_clk
		pll_locked                : out   std_logic;                                         --                 .pll_locked
		pll_write_clk_pre_phy_clk : out   std_logic;                                         --                 .pll_write_clk_pre_phy_clk
		pll_addr_cmd_clk          : out   std_logic;                                         --                 .pll_addr_cmd_clk
		pll_avl_clk               : out   std_logic;                                         --                 .pll_avl_clk
		pll_config_clk            : out   std_logic;                                         --                 .pll_config_clk
		pll_hr_clk                : out   std_logic;                                         --                 .pll_hr_clk
		pll_p2c_read_clk          : out   std_logic;                                         --                 .pll_p2c_read_clk
		pll_c2p_write_clk         : out   std_logic                                          --                 .pll_c2p_write_clk
	);
end entity mem_if_ddr3_emif_0_example_design_example_sim_e0_if0;

architecture rtl of mem_if_ddr3_emif_0_example_design_example_sim_e0_if0 is
	component mem_if_ddr3_emif_0_example_design_example_sim_e0_if0_pll0 is
		port (
			global_reset_n            : in  std_logic := 'X'; -- reset_n
			afi_clk                   : out std_logic;        -- clk
			afi_half_clk              : out std_logic;        -- clk
			pll_ref_clk               : in  std_logic := 'X'; -- clk
			pll_mem_clk               : out std_logic;        -- pll_mem_clk
			pll_write_clk             : out std_logic;        -- pll_write_clk
			pll_locked                : out std_logic;        -- pll_locked
			pll_write_clk_pre_phy_clk : out std_logic;        -- pll_write_clk_pre_phy_clk
			pll_addr_cmd_clk          : out std_logic;        -- pll_addr_cmd_clk
			pll_avl_clk               : out std_logic;        -- pll_avl_clk
			pll_config_clk            : out std_logic;        -- pll_config_clk
			pll_hr_clk                : out std_logic;        -- pll_hr_clk
			pll_p2c_read_clk          : out std_logic;        -- pll_p2c_read_clk
			pll_c2p_write_clk         : out std_logic         -- pll_c2p_write_clk
		);
	end component mem_if_ddr3_emif_0_example_design_example_sim_e0_if0_pll0;

	component mem_if_ddr3_emif_0_example_design_example_sim_e0_if0_p0 is
		port (
			global_reset_n              : in    std_logic                      := 'X';             -- reset_n
			soft_reset_n                : in    std_logic                      := 'X';             -- reset_n
			csr_soft_reset_req          : in    std_logic                      := 'X';             -- reset
			afi_reset_n                 : out   std_logic;                                         -- reset_n
			afi_reset_export_n          : out   std_logic;                                         -- reset_n
			afi_clk                     : in    std_logic                      := 'X';             -- clk
			afi_half_clk                : in    std_logic                      := 'X';             -- clk
			addr_cmd_clk                : out   std_logic;                                         -- clk
			avl_clk                     : out   std_logic;                                         -- clk
			avl_reset_n                 : out   std_logic;                                         -- reset_n
			scc_clk                     : out   std_logic;                                         -- clk
			scc_reset_n                 : out   std_logic;                                         -- reset_n
			dll_clk                     : out   std_logic;                                         -- clk
			afi_addr                    : in    std_logic_vector(55 downto 0)  := (others => 'X'); -- afi_addr
			afi_ba                      : in    std_logic_vector(11 downto 0)  := (others => 'X'); -- afi_ba
			afi_ras_n                   : in    std_logic_vector(3 downto 0)   := (others => 'X'); -- afi_ras_n
			afi_we_n                    : in    std_logic_vector(3 downto 0)   := (others => 'X'); -- afi_we_n
			afi_cas_n                   : in    std_logic_vector(3 downto 0)   := (others => 'X'); -- afi_cas_n
			afi_odt                     : in    std_logic_vector(3 downto 0)   := (others => 'X'); -- afi_odt
			afi_cke                     : in    std_logic_vector(3 downto 0)   := (others => 'X'); -- afi_cke
			afi_cs_n                    : in    std_logic_vector(3 downto 0)   := (others => 'X'); -- afi_cs_n
			afi_dqs_burst               : in    std_logic_vector(31 downto 0)  := (others => 'X'); -- afi_dqs_burst
			afi_wdata_valid             : in    std_logic_vector(31 downto 0)  := (others => 'X'); -- afi_wdata_valid
			afi_wdata                   : in    std_logic_vector(511 downto 0) := (others => 'X'); -- afi_wdata
			afi_dm                      : in    std_logic_vector(63 downto 0)  := (others => 'X'); -- afi_dm
			afi_rdata                   : out   std_logic_vector(511 downto 0);                    -- afi_rdata
			afi_rst_n                   : in    std_logic_vector(3 downto 0)   := (others => 'X'); -- afi_rst_n
			afi_rdata_en                : in    std_logic_vector(3 downto 0)   := (others => 'X'); -- afi_rdata_en
			afi_rdata_en_full           : in    std_logic_vector(3 downto 0)   := (others => 'X'); -- afi_rdata_en_full
			afi_rdata_valid             : out   std_logic_vector(3 downto 0);                      -- afi_rdata_valid
			afi_cal_success             : out   std_logic;                                         -- afi_cal_success
			afi_cal_fail                : out   std_logic;                                         -- afi_cal_fail
			afi_wlat                    : out   std_logic_vector(5 downto 0);                      -- afi_wlat
			afi_rlat                    : out   std_logic_vector(5 downto 0);                      -- afi_rlat
			phy_clk                     : out   std_logic;                                         -- phy_clk
			phy_reset_n                 : out   std_logic;                                         -- phy_reset_n
			phy_read_latency_counter    : in    std_logic_vector(3 downto 0)   := (others => 'X'); -- phy_read_latency_counter
			phy_afi_wlat                : in    std_logic_vector(5 downto 0)   := (others => 'X'); -- phy_afi_wlat
			phy_afi_rlat                : in    std_logic_vector(5 downto 0)   := (others => 'X'); -- phy_afi_rlat
			phy_read_increment_vfifo_fr : in    std_logic_vector(7 downto 0)   := (others => 'X'); -- phy_read_increment_vfifo_fr
			phy_read_increment_vfifo_hr : in    std_logic_vector(7 downto 0)   := (others => 'X'); -- phy_read_increment_vfifo_hr
			phy_read_increment_vfifo_qr : in    std_logic_vector(7 downto 0)   := (others => 'X'); -- phy_read_increment_vfifo_qr
			phy_reset_mem_stable        : in    std_logic                      := 'X';             -- phy_reset_mem_stable
			phy_cal_success             : in    std_logic                      := 'X';             -- phy_cal_success
			phy_cal_fail                : in    std_logic                      := 'X';             -- phy_cal_fail
			phy_cal_debug_info          : in    std_logic_vector(31 downto 0)  := (others => 'X'); -- phy_cal_debug_info
			phy_read_fifo_reset         : in    std_logic_vector(7 downto 0)   := (others => 'X'); -- phy_read_fifo_reset
			phy_vfifo_rd_en_override    : in    std_logic_vector(7 downto 0)   := (others => 'X'); -- phy_vfifo_rd_en_override
			phy_read_fifo_q             : out   std_logic_vector(511 downto 0);                    -- phy_read_fifo_q
			phy_write_fr_cycle_shifts   : in    std_logic_vector(15 downto 0)  := (others => 'X'); -- phy_write_fr_cycle_shifts
			calib_skip_steps            : out   std_logic_vector(7 downto 0);                      -- calib_skip_steps
			scc_data                    : in    std_logic_vector(7 downto 0)   := (others => 'X'); -- scc_data
			scc_dqs_ena                 : in    std_logic_vector(7 downto 0)   := (others => 'X'); -- scc_dqs_ena
			scc_dqs_io_ena              : in    std_logic_vector(7 downto 0)   := (others => 'X'); -- scc_dqs_io_ena
			scc_dq_ena                  : in    std_logic_vector(63 downto 0)  := (others => 'X'); -- scc_dq_ena
			scc_dm_ena                  : in    std_logic_vector(7 downto 0)   := (others => 'X'); -- scc_dm_ena
			capture_strobe_tracking     : out   std_logic_vector(7 downto 0);                      -- capture_strobe_tracking
			scc_upd                     : in    std_logic_vector(0 downto 0)   := (others => 'X'); -- scc_upd
			afi_mem_clk_disable         : in    std_logic_vector(0 downto 0)   := (others => 'X'); -- afi_mem_clk_disable
			pll_mem_clk                 : in    std_logic                      := 'X';             -- pll_mem_clk
			pll_write_clk               : in    std_logic                      := 'X';             -- pll_write_clk
			pll_locked                  : in    std_logic                      := 'X';             -- pll_locked
			pll_write_clk_pre_phy_clk   : in    std_logic                      := 'X';             -- pll_write_clk_pre_phy_clk
			pll_addr_cmd_clk            : in    std_logic                      := 'X';             -- pll_addr_cmd_clk
			pll_avl_clk                 : in    std_logic                      := 'X';             -- pll_avl_clk
			pll_config_clk              : in    std_logic                      := 'X';             -- pll_config_clk
			pll_hr_clk                  : in    std_logic                      := 'X';             -- pll_hr_clk
			pll_p2c_read_clk            : in    std_logic                      := 'X';             -- pll_p2c_read_clk
			pll_c2p_write_clk           : in    std_logic                      := 'X';             -- pll_c2p_write_clk
			dll_pll_locked              : out   std_logic;                                         -- dll_pll_locked
			dll_delayctrl               : in    std_logic_vector(6 downto 0)   := (others => 'X'); -- dll_delayctrl
			seriesterminationcontrol    : in    std_logic_vector(15 downto 0)  := (others => 'X'); -- seriesterminationcontrol
			parallelterminationcontrol  : in    std_logic_vector(15 downto 0)  := (others => 'X'); -- parallelterminationcontrol
			mem_a                       : out   std_logic_vector(13 downto 0);                     -- mem_a
			mem_ba                      : out   std_logic_vector(2 downto 0);                      -- mem_ba
			mem_ck                      : out   std_logic_vector(0 downto 0);                      -- mem_ck
			mem_ck_n                    : out   std_logic_vector(0 downto 0);                      -- mem_ck_n
			mem_cke                     : out   std_logic_vector(0 downto 0);                      -- mem_cke
			mem_cs_n                    : out   std_logic_vector(0 downto 0);                      -- mem_cs_n
			mem_dm                      : out   std_logic_vector(7 downto 0);                      -- mem_dm
			mem_ras_n                   : out   std_logic_vector(0 downto 0);                      -- mem_ras_n
			mem_cas_n                   : out   std_logic_vector(0 downto 0);                      -- mem_cas_n
			mem_we_n                    : out   std_logic_vector(0 downto 0);                      -- mem_we_n
			mem_reset_n                 : out   std_logic;                                         -- mem_reset_n
			mem_dq                      : inout std_logic_vector(63 downto 0)  := (others => 'X'); -- mem_dq
			mem_dqs                     : inout std_logic_vector(7 downto 0)   := (others => 'X'); -- mem_dqs
			mem_dqs_n                   : inout std_logic_vector(7 downto 0)   := (others => 'X'); -- mem_dqs_n
			mem_odt                     : out   std_logic_vector(0 downto 0)                       -- mem_odt
		);
	end component mem_if_ddr3_emif_0_example_design_example_sim_e0_if0_p0;

	component afi_mux_ddr3_ddrx is
		generic (
			AFI_RATE_RATIO            : integer := 0;
			AFI_ADDR_WIDTH            : integer := 0;
			AFI_BANKADDR_WIDTH        : integer := 0;
			AFI_CONTROL_WIDTH         : integer := 0;
			AFI_CS_WIDTH              : integer := 0;
			AFI_CLK_EN_WIDTH          : integer := 0;
			AFI_DM_WIDTH              : integer := 0;
			AFI_DQ_WIDTH              : integer := 0;
			AFI_ODT_WIDTH             : integer := 0;
			AFI_WRITE_DQS_WIDTH       : integer := 0;
			AFI_RLAT_WIDTH            : integer := 0;
			AFI_WLAT_WIDTH            : integer := 0;
			AFI_RRANK_WIDTH           : integer := 0;
			AFI_WRANK_WIDTH           : integer := 0;
			MRS_MIRROR_PING_PONG_ATSO : boolean := false
		);
		port (
			clk                   : in  std_logic                      := 'X';             -- clk
			afi_addr              : in  std_logic_vector(55 downto 0)  := (others => 'X'); -- afi_addr
			afi_ba                : in  std_logic_vector(11 downto 0)  := (others => 'X'); -- afi_ba
			afi_ras_n             : in  std_logic_vector(3 downto 0)   := (others => 'X'); -- afi_ras_n
			afi_we_n              : in  std_logic_vector(3 downto 0)   := (others => 'X'); -- afi_we_n
			afi_cas_n             : in  std_logic_vector(3 downto 0)   := (others => 'X'); -- afi_cas_n
			afi_odt               : in  std_logic_vector(3 downto 0)   := (others => 'X'); -- afi_odt
			afi_cke               : in  std_logic_vector(3 downto 0)   := (others => 'X'); -- afi_cke
			afi_cs_n              : in  std_logic_vector(3 downto 0)   := (others => 'X'); -- afi_cs_n
			afi_dqs_burst         : in  std_logic_vector(31 downto 0)  := (others => 'X'); -- afi_dqs_burst
			afi_wdata_valid       : in  std_logic_vector(31 downto 0)  := (others => 'X'); -- afi_wdata_valid
			afi_wdata             : in  std_logic_vector(511 downto 0) := (others => 'X'); -- afi_wdata
			afi_dm                : in  std_logic_vector(63 downto 0)  := (others => 'X'); -- afi_dm
			afi_rdata             : out std_logic_vector(511 downto 0);                    -- afi_rdata
			afi_rst_n             : in  std_logic_vector(3 downto 0)   := (others => 'X'); -- afi_rst_n
			afi_rdata_en          : in  std_logic_vector(3 downto 0)   := (others => 'X'); -- afi_rdata_en
			afi_rdata_en_full     : in  std_logic_vector(3 downto 0)   := (others => 'X'); -- afi_rdata_en_full
			afi_rdata_valid       : out std_logic_vector(3 downto 0);                      -- afi_rdata_valid
			afi_cal_success       : out std_logic;                                         -- afi_cal_success
			afi_cal_fail          : out std_logic;                                         -- afi_cal_fail
			afi_wlat              : out std_logic_vector(5 downto 0);                      -- afi_wlat
			afi_rlat              : out std_logic_vector(5 downto 0);                      -- afi_rlat
			phy_mux_addr          : out std_logic_vector(55 downto 0);                     -- afi_addr
			phy_mux_ba            : out std_logic_vector(11 downto 0);                     -- afi_ba
			phy_mux_ras_n         : out std_logic_vector(3 downto 0);                      -- afi_ras_n
			phy_mux_we_n          : out std_logic_vector(3 downto 0);                      -- afi_we_n
			phy_mux_cas_n         : out std_logic_vector(3 downto 0);                      -- afi_cas_n
			phy_mux_odt           : out std_logic_vector(3 downto 0);                      -- afi_odt
			phy_mux_cke           : out std_logic_vector(3 downto 0);                      -- afi_cke
			phy_mux_cs_n          : out std_logic_vector(3 downto 0);                      -- afi_cs_n
			phy_mux_dqs_burst     : out std_logic_vector(31 downto 0);                     -- afi_dqs_burst
			phy_mux_wdata_valid   : out std_logic_vector(31 downto 0);                     -- afi_wdata_valid
			phy_mux_wdata         : out std_logic_vector(511 downto 0);                    -- afi_wdata
			phy_mux_dm            : out std_logic_vector(63 downto 0);                     -- afi_dm
			phy_mux_rdata         : in  std_logic_vector(511 downto 0) := (others => 'X'); -- afi_rdata
			phy_mux_rst_n         : out std_logic_vector(3 downto 0);                      -- afi_rst_n
			phy_mux_rdata_en      : out std_logic_vector(3 downto 0);                      -- afi_rdata_en
			phy_mux_rdata_en_full : out std_logic_vector(3 downto 0);                      -- afi_rdata_en_full
			phy_mux_rdata_valid   : in  std_logic_vector(3 downto 0)   := (others => 'X'); -- afi_rdata_valid
			phy_mux_cal_success   : in  std_logic                      := 'X';             -- afi_cal_success
			phy_mux_cal_fail      : in  std_logic                      := 'X';             -- afi_cal_fail
			phy_mux_wlat          : in  std_logic_vector(5 downto 0)   := (others => 'X'); -- afi_wlat
			phy_mux_rlat          : in  std_logic_vector(5 downto 0)   := (others => 'X'); -- afi_rlat
			seq_mux_addr          : in  std_logic_vector(55 downto 0)  := (others => 'X'); -- afi_addr
			seq_mux_ba            : in  std_logic_vector(11 downto 0)  := (others => 'X'); -- afi_ba
			seq_mux_ras_n         : in  std_logic_vector(3 downto 0)   := (others => 'X'); -- afi_ras_n
			seq_mux_we_n          : in  std_logic_vector(3 downto 0)   := (others => 'X'); -- afi_we_n
			seq_mux_cas_n         : in  std_logic_vector(3 downto 0)   := (others => 'X'); -- afi_cas_n
			seq_mux_odt           : in  std_logic_vector(3 downto 0)   := (others => 'X'); -- afi_odt
			seq_mux_cke           : in  std_logic_vector(3 downto 0)   := (others => 'X'); -- afi_cke
			seq_mux_cs_n          : in  std_logic_vector(3 downto 0)   := (others => 'X'); -- afi_cs_n
			seq_mux_dqs_burst     : in  std_logic_vector(31 downto 0)  := (others => 'X'); -- afi_dqs_burst
			seq_mux_wdata_valid   : in  std_logic_vector(31 downto 0)  := (others => 'X'); -- afi_wdata_valid
			seq_mux_wdata         : in  std_logic_vector(511 downto 0) := (others => 'X'); -- afi_wdata
			seq_mux_dm            : in  std_logic_vector(63 downto 0)  := (others => 'X'); -- afi_dm
			seq_mux_rdata         : out std_logic_vector(511 downto 0);                    -- afi_rdata
			seq_mux_rst_n         : in  std_logic_vector(3 downto 0)   := (others => 'X'); -- afi_rst_n
			seq_mux_rdata_en      : in  std_logic_vector(3 downto 0)   := (others => 'X'); -- afi_rdata_en
			seq_mux_rdata_en_full : in  std_logic_vector(3 downto 0)   := (others => 'X'); -- afi_rdata_en_full
			seq_mux_rdata_valid   : out std_logic_vector(3 downto 0);                      -- afi_rdata_valid
			mux_sel               : in  std_logic                      := 'X'              -- mux_sel
		);
	end component afi_mux_ddr3_ddrx;

	component mem_if_ddr3_emif_0_example_design_example_sim_e0_if0_s0 is
		port (
			avl_clk                     : in  std_logic                      := 'X';             -- clk
			avl_reset_n                 : in  std_logic                      := 'X';             -- reset_n
			scc_clk                     : in  std_logic                      := 'X';             -- clk
			reset_n_scc_clk             : in  std_logic                      := 'X';             -- reset_n
			scc_data                    : out std_logic_vector(7 downto 0);                      -- scc_data
			scc_dqs_ena                 : out std_logic_vector(7 downto 0);                      -- scc_dqs_ena
			scc_dqs_io_ena              : out std_logic_vector(7 downto 0);                      -- scc_dqs_io_ena
			scc_dq_ena                  : out std_logic_vector(63 downto 0);                     -- scc_dq_ena
			scc_dm_ena                  : out std_logic_vector(7 downto 0);                      -- scc_dm_ena
			capture_strobe_tracking     : in  std_logic_vector(7 downto 0)   := (others => 'X'); -- capture_strobe_tracking
			scc_upd                     : out std_logic_vector(0 downto 0);                      -- scc_upd
			afi_init_req                : in  std_logic                      := 'X';             -- afi_init_req
			afi_cal_req                 : in  std_logic                      := 'X';             -- afi_cal_req
			phy_clk                     : in  std_logic                      := 'X';             -- phy_clk
			phy_reset_n                 : in  std_logic                      := 'X';             -- phy_reset_n
			phy_read_latency_counter    : out std_logic_vector(3 downto 0);                      -- phy_read_latency_counter
			phy_afi_wlat                : out std_logic_vector(5 downto 0);                      -- phy_afi_wlat
			phy_afi_rlat                : out std_logic_vector(5 downto 0);                      -- phy_afi_rlat
			phy_read_increment_vfifo_fr : out std_logic_vector(7 downto 0);                      -- phy_read_increment_vfifo_fr
			phy_read_increment_vfifo_hr : out std_logic_vector(7 downto 0);                      -- phy_read_increment_vfifo_hr
			phy_read_increment_vfifo_qr : out std_logic_vector(7 downto 0);                      -- phy_read_increment_vfifo_qr
			phy_reset_mem_stable        : out std_logic;                                         -- phy_reset_mem_stable
			phy_cal_success             : out std_logic;                                         -- phy_cal_success
			phy_cal_fail                : out std_logic;                                         -- phy_cal_fail
			phy_cal_debug_info          : out std_logic_vector(31 downto 0);                     -- phy_cal_debug_info
			phy_read_fifo_reset         : out std_logic_vector(7 downto 0);                      -- phy_read_fifo_reset
			phy_vfifo_rd_en_override    : out std_logic_vector(7 downto 0);                      -- phy_vfifo_rd_en_override
			phy_read_fifo_q             : in  std_logic_vector(511 downto 0) := (others => 'X'); -- phy_read_fifo_q
			phy_write_fr_cycle_shifts   : out std_logic_vector(15 downto 0);                     -- phy_write_fr_cycle_shifts
			calib_skip_steps            : in  std_logic_vector(7 downto 0)   := (others => 'X'); -- calib_skip_steps
			phy_mux_sel                 : out std_logic;                                         -- mux_sel
			afi_clk                     : in  std_logic                      := 'X';             -- clk
			afi_reset_n                 : in  std_logic                      := 'X';             -- reset_n
			afi_addr                    : out std_logic_vector(55 downto 0);                     -- afi_addr
			afi_ba                      : out std_logic_vector(11 downto 0);                     -- afi_ba
			afi_ras_n                   : out std_logic_vector(3 downto 0);                      -- afi_ras_n
			afi_we_n                    : out std_logic_vector(3 downto 0);                      -- afi_we_n
			afi_cas_n                   : out std_logic_vector(3 downto 0);                      -- afi_cas_n
			afi_odt                     : out std_logic_vector(3 downto 0);                      -- afi_odt
			afi_cke                     : out std_logic_vector(3 downto 0);                      -- afi_cke
			afi_cs_n                    : out std_logic_vector(3 downto 0);                      -- afi_cs_n
			afi_dqs_burst               : out std_logic_vector(31 downto 0);                     -- afi_dqs_burst
			afi_wdata_valid             : out std_logic_vector(31 downto 0);                     -- afi_wdata_valid
			afi_wdata                   : out std_logic_vector(511 downto 0);                    -- afi_wdata
			afi_dm                      : out std_logic_vector(63 downto 0);                     -- afi_dm
			afi_rdata                   : in  std_logic_vector(511 downto 0) := (others => 'X'); -- afi_rdata
			afi_rst_n                   : out std_logic_vector(3 downto 0);                      -- afi_rst_n
			afi_rdata_en                : out std_logic_vector(3 downto 0);                      -- afi_rdata_en
			afi_rdata_en_full           : out std_logic_vector(3 downto 0);                      -- afi_rdata_en_full
			afi_rdata_valid             : in  std_logic_vector(3 downto 0)   := (others => 'X'); -- afi_rdata_valid
			afi_seq_busy                : out std_logic_vector(0 downto 0);                      -- afi_seq_busy
			afi_ctl_refresh_done        : in  std_logic_vector(0 downto 0)   := (others => 'X'); -- afi_ctl_refresh_done
			afi_ctl_long_idle           : in  std_logic_vector(0 downto 0)   := (others => 'X'); -- afi_ctl_long_idle
			seq_waitrequest             : out std_logic;                                         -- waitrequest
			seq_readdata                : out std_logic_vector(31 downto 0);                     -- readdata
			seq_readdatavalid           : out std_logic;                                         -- readdatavalid
			seq_burstcount              : in  std_logic_vector(0 downto 0)   := (others => 'X'); -- burstcount
			seq_writedata               : in  std_logic_vector(31 downto 0)  := (others => 'X'); -- writedata
			seq_address                 : in  std_logic_vector(31 downto 0)  := (others => 'X'); -- address
			seq_write                   : in  std_logic                      := 'X';             -- write
			seq_read                    : in  std_logic                      := 'X';             -- read
			seq_byteenable              : in  std_logic_vector(3 downto 0)   := (others => 'X'); -- byteenable
			seq_debugaccess             : in  std_logic                      := 'X'              -- debugaccess
		);
	end component mem_if_ddr3_emif_0_example_design_example_sim_e0_if0_s0;

	component mem_if_ddr3_emif_0_example_design_example_sim_e0_if0_dmaster is
		port (
			clk_clk              : in  std_logic                     := 'X';             -- clk
			clk_reset_reset      : in  std_logic                     := 'X';             -- reset
			master_address       : out std_logic_vector(31 downto 0);                    -- address
			master_readdata      : in  std_logic_vector(31 downto 0) := (others => 'X'); -- readdata
			master_read          : out std_logic;                                        -- read
			master_write         : out std_logic;                                        -- write
			master_writedata     : out std_logic_vector(31 downto 0);                    -- writedata
			master_waitrequest   : in  std_logic                     := 'X';             -- waitrequest
			master_readdatavalid : in  std_logic                     := 'X';             -- readdatavalid
			master_byteenable    : out std_logic_vector(3 downto 0);                     -- byteenable
			master_reset_reset   : out std_logic                                         -- reset
		);
	end component mem_if_ddr3_emif_0_example_design_example_sim_e0_if0_dmaster;

	component mem_if_ddr3_emif_0_example_design_example_sim_e0_if0_c0 is
		port (
			afi_reset_n          : in  std_logic                      := 'X';             -- reset_n
			afi_clk              : in  std_logic                      := 'X';             -- clk
			afi_half_clk         : in  std_logic                      := 'X';             -- clk
			local_init_done      : out std_logic;                                         -- local_init_done
			local_cal_success    : out std_logic;                                         -- local_cal_success
			local_cal_fail       : out std_logic;                                         -- local_cal_fail
			afi_addr             : out std_logic_vector(55 downto 0);                     -- afi_addr
			afi_ba               : out std_logic_vector(11 downto 0);                     -- afi_ba
			afi_ras_n            : out std_logic_vector(3 downto 0);                      -- afi_ras_n
			afi_we_n             : out std_logic_vector(3 downto 0);                      -- afi_we_n
			afi_cas_n            : out std_logic_vector(3 downto 0);                      -- afi_cas_n
			afi_odt              : out std_logic_vector(3 downto 0);                      -- afi_odt
			afi_cke              : out std_logic_vector(3 downto 0);                      -- afi_cke
			afi_cs_n             : out std_logic_vector(3 downto 0);                      -- afi_cs_n
			afi_dqs_burst        : out std_logic_vector(31 downto 0);                     -- afi_dqs_burst
			afi_wdata_valid      : out std_logic_vector(31 downto 0);                     -- afi_wdata_valid
			afi_wdata            : out std_logic_vector(511 downto 0);                    -- afi_wdata
			afi_dm               : out std_logic_vector(63 downto 0);                     -- afi_dm
			afi_rdata            : in  std_logic_vector(511 downto 0) := (others => 'X'); -- afi_rdata
			afi_rst_n            : out std_logic_vector(3 downto 0);                      -- afi_rst_n
			afi_mem_clk_disable  : out std_logic_vector(0 downto 0);                      -- afi_mem_clk_disable
			afi_init_req         : out std_logic;                                         -- afi_init_req
			afi_cal_req          : out std_logic;                                         -- afi_cal_req
			afi_seq_busy         : in  std_logic_vector(0 downto 0)   := (others => 'X'); -- afi_seq_busy
			afi_ctl_refresh_done : out std_logic_vector(0 downto 0);                      -- afi_ctl_refresh_done
			afi_ctl_long_idle    : out std_logic_vector(0 downto 0);                      -- afi_ctl_long_idle
			afi_rdata_en         : out std_logic_vector(3 downto 0);                      -- afi_rdata_en
			afi_rdata_en_full    : out std_logic_vector(3 downto 0);                      -- afi_rdata_en_full
			afi_rdata_valid      : in  std_logic_vector(3 downto 0)   := (others => 'X'); -- afi_rdata_valid
			afi_cal_success      : in  std_logic                      := 'X';             -- afi_cal_success
			afi_cal_fail         : in  std_logic                      := 'X';             -- afi_cal_fail
			afi_wlat             : in  std_logic_vector(5 downto 0)   := (others => 'X'); -- afi_wlat
			afi_rlat             : in  std_logic_vector(5 downto 0)   := (others => 'X'); -- afi_rlat
			local_refresh_req    : in  std_logic                      := 'X';             -- local_refresh_req
			local_refresh_chip   : in  std_logic_vector(0 downto 0)   := (others => 'X'); -- local_refresh_chip
			local_refresh_ack    : out std_logic;                                         -- local_refresh_ack
			avl_ready            : out std_logic;                                         -- waitrequest_n
			avl_burstbegin       : in  std_logic                      := 'X';             -- beginbursttransfer
			avl_addr             : in  std_logic_vector(23 downto 0)  := (others => 'X'); -- address
			avl_rdata_valid      : out std_logic;                                         -- readdatavalid
			avl_rdata            : out std_logic_vector(511 downto 0);                    -- readdata
			avl_wdata            : in  std_logic_vector(511 downto 0) := (others => 'X'); -- writedata
			avl_be               : in  std_logic_vector(63 downto 0)  := (others => 'X'); -- byteenable
			avl_read_req         : in  std_logic                      := 'X';             -- read
			avl_write_req        : in  std_logic                      := 'X';             -- write
			avl_size             : in  std_logic                      := 'X'              -- burstcount
		);
	end component mem_if_ddr3_emif_0_example_design_example_sim_e0_if0_c0;

	component altera_mem_if_oct_stratixv is
		generic (
			OCT_TERM_CONTROL_WIDTH : integer := 14
		);
		port (
			oct_rzqin                  : in  std_logic                     := 'X'; -- rzqin
			seriesterminationcontrol   : out std_logic_vector(15 downto 0);        -- seriesterminationcontrol
			parallelterminationcontrol : out std_logic_vector(15 downto 0)         -- parallelterminationcontrol
		);
	end component altera_mem_if_oct_stratixv;

	component altera_mem_if_dll_stratixv is
		generic (
			DLL_DELAY_CTRL_WIDTH       : integer := 6;
			DLL_OFFSET_CTRL_WIDTH      : integer := 6;
			DELAY_BUFFER_MODE          : string  := "HIGH";
			DELAY_CHAIN_LENGTH         : integer := 8;
			DLL_INPUT_FREQUENCY_PS_STR : string  := ""
		);
		port (
			clk            : in  std_logic                    := 'X'; -- clk
			dll_pll_locked : in  std_logic                    := 'X'; -- dll_pll_locked
			dll_delayctrl  : out std_logic_vector(6 downto 0)         -- dll_delayctrl
		);
	end component altera_mem_if_dll_stratixv;

	component mem_if_ddr3_emif_0_example_design_example_sim_e0_if0_mm_interconnect_0 is
		port (
			p0_avl_clk_clk                                              : in  std_logic                     := 'X';             -- clk
			dmaster_clk_reset_reset_bridge_in_reset_reset               : in  std_logic                     := 'X';             -- reset
			dmaster_master_translator_reset_reset_bridge_in_reset_reset : in  std_logic                     := 'X';             -- reset
			dmaster_master_address                                      : in  std_logic_vector(31 downto 0) := (others => 'X'); -- address
			dmaster_master_waitrequest                                  : out std_logic;                                        -- waitrequest
			dmaster_master_byteenable                                   : in  std_logic_vector(3 downto 0)  := (others => 'X'); -- byteenable
			dmaster_master_read                                         : in  std_logic                     := 'X';             -- read
			dmaster_master_readdata                                     : out std_logic_vector(31 downto 0);                    -- readdata
			dmaster_master_readdatavalid                                : out std_logic;                                        -- readdatavalid
			dmaster_master_write                                        : in  std_logic                     := 'X';             -- write
			dmaster_master_writedata                                    : in  std_logic_vector(31 downto 0) := (others => 'X'); -- writedata
			s0_seq_debug_address                                        : out std_logic_vector(31 downto 0);                    -- address
			s0_seq_debug_write                                          : out std_logic;                                        -- write
			s0_seq_debug_read                                           : out std_logic;                                        -- read
			s0_seq_debug_readdata                                       : in  std_logic_vector(31 downto 0) := (others => 'X'); -- readdata
			s0_seq_debug_writedata                                      : out std_logic_vector(31 downto 0);                    -- writedata
			s0_seq_debug_burstcount                                     : out std_logic_vector(0 downto 0);                     -- burstcount
			s0_seq_debug_byteenable                                     : out std_logic_vector(3 downto 0);                     -- byteenable
			s0_seq_debug_readdatavalid                                  : in  std_logic                     := 'X';             -- readdatavalid
			s0_seq_debug_waitrequest                                    : in  std_logic                     := 'X'              -- waitrequest
		);
	end component mem_if_ddr3_emif_0_example_design_example_sim_e0_if0_mm_interconnect_0;

	signal pll0_afi_clk_clk                             : std_logic;                      -- pll0:afi_clk -> [afi_clk, c0:afi_clk, m0:clk, p0:afi_clk, s0:afi_clk]
	signal pll0_afi_half_clk_clk                        : std_logic;                      -- pll0:afi_half_clk -> [afi_half_clk, c0:afi_half_clk, p0:afi_half_clk]
	signal p0_afi_reset_reset                           : std_logic;                      -- p0:afi_reset_n -> [afi_reset_n, c0:afi_reset_n, s0:afi_reset_n]
	signal m0_phy_mux_afi_addr                          : std_logic_vector(55 downto 0);  -- m0:phy_mux_addr -> p0:afi_addr
	signal m0_phy_mux_afi_odt                           : std_logic_vector(3 downto 0);   -- m0:phy_mux_odt -> p0:afi_odt
	signal p0_afi_afi_wlat                              : std_logic_vector(5 downto 0);   -- p0:afi_wlat -> m0:phy_mux_wlat
	signal p0_afi_afi_rdata_valid                       : std_logic_vector(3 downto 0);   -- p0:afi_rdata_valid -> m0:phy_mux_rdata_valid
	signal m0_phy_mux_afi_rdata_en_full                 : std_logic_vector(3 downto 0);   -- m0:phy_mux_rdata_en_full -> p0:afi_rdata_en_full
	signal m0_phy_mux_afi_we_n                          : std_logic_vector(3 downto 0);   -- m0:phy_mux_we_n -> p0:afi_we_n
	signal m0_phy_mux_afi_ba                            : std_logic_vector(11 downto 0);  -- m0:phy_mux_ba -> p0:afi_ba
	signal m0_phy_mux_afi_cke                           : std_logic_vector(3 downto 0);   -- m0:phy_mux_cke -> p0:afi_cke
	signal m0_phy_mux_afi_cs_n                          : std_logic_vector(3 downto 0);   -- m0:phy_mux_cs_n -> p0:afi_cs_n
	signal m0_phy_mux_afi_wdata                         : std_logic_vector(511 downto 0); -- m0:phy_mux_wdata -> p0:afi_wdata
	signal m0_phy_mux_afi_rdata_en                      : std_logic_vector(3 downto 0);   -- m0:phy_mux_rdata_en -> p0:afi_rdata_en
	signal m0_phy_mux_afi_rst_n                         : std_logic_vector(3 downto 0);   -- m0:phy_mux_rst_n -> p0:afi_rst_n
	signal m0_phy_mux_afi_cas_n                         : std_logic_vector(3 downto 0);   -- m0:phy_mux_cas_n -> p0:afi_cas_n
	signal p0_afi_afi_cal_success                       : std_logic;                      -- p0:afi_cal_success -> m0:phy_mux_cal_success
	signal m0_phy_mux_afi_ras_n                         : std_logic_vector(3 downto 0);   -- m0:phy_mux_ras_n -> p0:afi_ras_n
	signal p0_afi_afi_rlat                              : std_logic_vector(5 downto 0);   -- p0:afi_rlat -> m0:phy_mux_rlat
	signal p0_afi_afi_rdata                             : std_logic_vector(511 downto 0); -- p0:afi_rdata -> m0:phy_mux_rdata
	signal p0_afi_afi_cal_fail                          : std_logic;                      -- p0:afi_cal_fail -> m0:phy_mux_cal_fail
	signal m0_phy_mux_afi_wdata_valid                   : std_logic_vector(31 downto 0);  -- m0:phy_mux_wdata_valid -> p0:afi_wdata_valid
	signal m0_phy_mux_afi_dqs_burst                     : std_logic_vector(31 downto 0);  -- m0:phy_mux_dqs_burst -> p0:afi_dqs_burst
	signal m0_phy_mux_afi_dm                            : std_logic_vector(63 downto 0);  -- m0:phy_mux_dm -> p0:afi_dm
	signal m0_afi_afi_wlat                              : std_logic_vector(5 downto 0);   -- m0:afi_wlat -> c0:afi_wlat
	signal m0_afi_afi_rdata_valid                       : std_logic_vector(3 downto 0);   -- m0:afi_rdata_valid -> c0:afi_rdata_valid
	signal m0_afi_afi_cal_success                       : std_logic;                      -- m0:afi_cal_success -> c0:afi_cal_success
	signal m0_afi_afi_rlat                              : std_logic_vector(5 downto 0);   -- m0:afi_rlat -> c0:afi_rlat
	signal m0_afi_afi_rdata                             : std_logic_vector(511 downto 0); -- m0:afi_rdata -> c0:afi_rdata
	signal m0_afi_afi_cal_fail                          : std_logic;                      -- m0:afi_cal_fail -> c0:afi_cal_fail
	signal p0_avl_clk_clk                               : std_logic;                      -- p0:avl_clk -> [dmaster:clk_clk, mm_interconnect_0:p0_avl_clk_clk, s0:avl_clk]
	signal p0_avl_reset_reset                           : std_logic;                      -- p0:avl_reset_n -> [p0_avl_reset_reset:in, s0:avl_reset_n]
	signal p0_scc_clk_clk                               : std_logic;                      -- p0:scc_clk -> s0:scc_clk
	signal p0_scc_reset_reset                           : std_logic;                      -- p0:scc_reset_n -> s0:reset_n_scc_clk
	signal s0_scc_scc_dm_ena                            : std_logic_vector(7 downto 0);   -- s0:scc_dm_ena -> p0:scc_dm_ena
	signal s0_scc_scc_dq_ena                            : std_logic_vector(63 downto 0);  -- s0:scc_dq_ena -> p0:scc_dq_ena
	signal s0_scc_scc_dqs_ena                           : std_logic_vector(7 downto 0);   -- s0:scc_dqs_ena -> p0:scc_dqs_ena
	signal s0_scc_scc_upd                               : std_logic_vector(0 downto 0);   -- s0:scc_upd -> p0:scc_upd
	signal p0_scc_capture_strobe_tracking               : std_logic_vector(7 downto 0);   -- p0:capture_strobe_tracking -> s0:capture_strobe_tracking
	signal s0_scc_scc_dqs_io_ena                        : std_logic_vector(7 downto 0);   -- s0:scc_dqs_io_ena -> p0:scc_dqs_io_ena
	signal s0_scc_scc_data                              : std_logic_vector(7 downto 0);   -- s0:scc_data -> p0:scc_data
	signal s0_tracking_afi_seq_busy                     : std_logic_vector(0 downto 0);   -- s0:afi_seq_busy -> c0:afi_seq_busy
	signal s0_afi_afi_addr                              : std_logic_vector(55 downto 0);  -- s0:afi_addr -> m0:seq_mux_addr
	signal s0_afi_afi_odt                               : std_logic_vector(3 downto 0);   -- s0:afi_odt -> m0:seq_mux_odt
	signal m0_seq_mux_afi_rdata_valid                   : std_logic_vector(3 downto 0);   -- m0:seq_mux_rdata_valid -> s0:afi_rdata_valid
	signal s0_afi_afi_rdata_en_full                     : std_logic_vector(3 downto 0);   -- s0:afi_rdata_en_full -> m0:seq_mux_rdata_en_full
	signal s0_afi_afi_we_n                              : std_logic_vector(3 downto 0);   -- s0:afi_we_n -> m0:seq_mux_we_n
	signal s0_afi_afi_ba                                : std_logic_vector(11 downto 0);  -- s0:afi_ba -> m0:seq_mux_ba
	signal s0_afi_afi_cke                               : std_logic_vector(3 downto 0);   -- s0:afi_cke -> m0:seq_mux_cke
	signal s0_afi_afi_cs_n                              : std_logic_vector(3 downto 0);   -- s0:afi_cs_n -> m0:seq_mux_cs_n
	signal s0_afi_afi_wdata                             : std_logic_vector(511 downto 0); -- s0:afi_wdata -> m0:seq_mux_wdata
	signal s0_afi_afi_rdata_en                          : std_logic_vector(3 downto 0);   -- s0:afi_rdata_en -> m0:seq_mux_rdata_en
	signal s0_afi_afi_rst_n                             : std_logic_vector(3 downto 0);   -- s0:afi_rst_n -> m0:seq_mux_rst_n
	signal s0_afi_afi_cas_n                             : std_logic_vector(3 downto 0);   -- s0:afi_cas_n -> m0:seq_mux_cas_n
	signal s0_afi_afi_ras_n                             : std_logic_vector(3 downto 0);   -- s0:afi_ras_n -> m0:seq_mux_ras_n
	signal m0_seq_mux_afi_rdata                         : std_logic_vector(511 downto 0); -- m0:seq_mux_rdata -> s0:afi_rdata
	signal s0_afi_afi_wdata_valid                       : std_logic_vector(31 downto 0);  -- s0:afi_wdata_valid -> m0:seq_mux_wdata_valid
	signal s0_afi_afi_dqs_burst                         : std_logic_vector(31 downto 0);  -- s0:afi_dqs_burst -> m0:seq_mux_dqs_burst
	signal s0_afi_afi_dm                                : std_logic_vector(63 downto 0);  -- s0:afi_dm -> m0:seq_mux_dm
	signal s0_mux_sel_mux_sel                           : std_logic;                      -- s0:phy_mux_sel -> m0:mux_sel
	signal s0_phy_phy_cal_success                       : std_logic;                      -- s0:phy_cal_success -> p0:phy_cal_success
	signal p0_phy_phy_reset_n                           : std_logic;                      -- p0:phy_reset_n -> s0:phy_reset_n
	signal s0_phy_phy_cal_fail                          : std_logic;                      -- s0:phy_cal_fail -> p0:phy_cal_fail
	signal s0_phy_phy_write_fr_cycle_shifts             : std_logic_vector(15 downto 0);  -- s0:phy_write_fr_cycle_shifts -> p0:phy_write_fr_cycle_shifts
	signal s0_phy_phy_read_increment_vfifo_qr           : std_logic_vector(7 downto 0);   -- s0:phy_read_increment_vfifo_qr -> p0:phy_read_increment_vfifo_qr
	signal p0_phy_phy_clk                               : std_logic;                      -- p0:phy_clk -> s0:phy_clk
	signal s0_phy_phy_afi_rlat                          : std_logic_vector(5 downto 0);   -- s0:phy_afi_rlat -> p0:phy_afi_rlat
	signal s0_phy_phy_read_increment_vfifo_hr           : std_logic_vector(7 downto 0);   -- s0:phy_read_increment_vfifo_hr -> p0:phy_read_increment_vfifo_hr
	signal s0_phy_phy_vfifo_rd_en_override              : std_logic_vector(7 downto 0);   -- s0:phy_vfifo_rd_en_override -> p0:phy_vfifo_rd_en_override
	signal p0_phy_phy_read_fifo_q                       : std_logic_vector(511 downto 0); -- p0:phy_read_fifo_q -> s0:phy_read_fifo_q
	signal s0_phy_phy_read_latency_counter              : std_logic_vector(3 downto 0);   -- s0:phy_read_latency_counter -> p0:phy_read_latency_counter
	signal s0_phy_phy_read_fifo_reset                   : std_logic_vector(7 downto 0);   -- s0:phy_read_fifo_reset -> p0:phy_read_fifo_reset
	signal s0_phy_phy_read_increment_vfifo_fr           : std_logic_vector(7 downto 0);   -- s0:phy_read_increment_vfifo_fr -> p0:phy_read_increment_vfifo_fr
	signal s0_phy_phy_cal_debug_info                    : std_logic_vector(31 downto 0);  -- s0:phy_cal_debug_info -> p0:phy_cal_debug_info
	signal s0_phy_phy_reset_mem_stable                  : std_logic;                      -- s0:phy_reset_mem_stable -> p0:phy_reset_mem_stable
	signal s0_phy_phy_afi_wlat                          : std_logic_vector(5 downto 0);   -- s0:phy_afi_wlat -> p0:phy_afi_wlat
	signal p0_calib_calib_skip_steps                    : std_logic_vector(7 downto 0);   -- p0:calib_skip_steps -> s0:calib_skip_steps
	signal dmaster_master_reset_reset                   : std_logic;                      -- dmaster:master_reset_reset -> p0:csr_soft_reset_req
	signal c0_afi_afi_cs_n                              : std_logic_vector(3 downto 0);   -- c0:afi_cs_n -> m0:afi_cs_n
	signal c0_afi_afi_cke                               : std_logic_vector(3 downto 0);   -- c0:afi_cke -> m0:afi_cke
	signal c0_afi_afi_ras_n                             : std_logic_vector(3 downto 0);   -- c0:afi_ras_n -> m0:afi_ras_n
	signal c0_afi_afi_mem_clk_disable                   : std_logic_vector(0 downto 0);   -- c0:afi_mem_clk_disable -> p0:afi_mem_clk_disable
	signal c0_afi_afi_ctl_refresh_done                  : std_logic_vector(0 downto 0);   -- c0:afi_ctl_refresh_done -> s0:afi_ctl_refresh_done
	signal c0_afi_afi_dm                                : std_logic_vector(63 downto 0);  -- c0:afi_dm -> m0:afi_dm
	signal c0_afi_afi_odt                               : std_logic_vector(3 downto 0);   -- c0:afi_odt -> m0:afi_odt
	signal c0_afi_afi_addr                              : std_logic_vector(55 downto 0);  -- c0:afi_addr -> m0:afi_addr
	signal c0_afi_afi_cal_req                           : std_logic;                      -- c0:afi_cal_req -> s0:afi_cal_req
	signal c0_afi_afi_rdata_en_full                     : std_logic_vector(3 downto 0);   -- c0:afi_rdata_en_full -> m0:afi_rdata_en_full
	signal c0_afi_afi_we_n                              : std_logic_vector(3 downto 0);   -- c0:afi_we_n -> m0:afi_we_n
	signal c0_afi_afi_ba                                : std_logic_vector(11 downto 0);  -- c0:afi_ba -> m0:afi_ba
	signal c0_afi_afi_wdata                             : std_logic_vector(511 downto 0); -- c0:afi_wdata -> m0:afi_wdata
	signal c0_afi_afi_rdata_en                          : std_logic_vector(3 downto 0);   -- c0:afi_rdata_en -> m0:afi_rdata_en
	signal c0_afi_afi_rst_n                             : std_logic_vector(3 downto 0);   -- c0:afi_rst_n -> m0:afi_rst_n
	signal c0_afi_afi_cas_n                             : std_logic_vector(3 downto 0);   -- c0:afi_cas_n -> m0:afi_cas_n
	signal c0_afi_afi_init_req                          : std_logic;                      -- c0:afi_init_req -> s0:afi_init_req
	signal c0_afi_afi_wdata_valid                       : std_logic_vector(31 downto 0);  -- c0:afi_wdata_valid -> m0:afi_wdata_valid
	signal c0_afi_afi_dqs_burst                         : std_logic_vector(31 downto 0);  -- c0:afi_dqs_burst -> m0:afi_dqs_burst
	signal c0_afi_afi_ctl_long_idle                     : std_logic_vector(0 downto 0);   -- c0:afi_ctl_long_idle -> s0:afi_ctl_long_idle
	signal oct0_oct_sharing_parallelterminationcontrol  : std_logic_vector(15 downto 0);  -- oct0:parallelterminationcontrol -> p0:parallelterminationcontrol
	signal oct0_oct_sharing_seriesterminationcontrol    : std_logic_vector(15 downto 0);  -- oct0:seriesterminationcontrol -> p0:seriesterminationcontrol
	signal pll0_pll_sharing_pll_avl_clk                 : std_logic;                      -- pll0:pll_avl_clk -> [pll_avl_clk, p0:pll_avl_clk]
	signal pll0_pll_sharing_pll_hr_clk                  : std_logic;                      -- pll0:pll_hr_clk -> [pll_hr_clk, p0:pll_hr_clk]
	signal pll0_pll_sharing_pll_p2c_read_clk            : std_logic;                      -- pll0:pll_p2c_read_clk -> [pll_p2c_read_clk, p0:pll_p2c_read_clk]
	signal pll0_pll_sharing_pll_config_clk              : std_logic;                      -- pll0:pll_config_clk -> [pll_config_clk, p0:pll_config_clk]
	signal pll0_pll_sharing_pll_addr_cmd_clk            : std_logic;                      -- pll0:pll_addr_cmd_clk -> [pll_addr_cmd_clk, p0:pll_addr_cmd_clk]
	signal pll0_pll_sharing_pll_mem_clk                 : std_logic;                      -- pll0:pll_mem_clk -> [pll_mem_clk, p0:pll_mem_clk]
	signal pll0_pll_sharing_pll_locked                  : std_logic;                      -- pll0:pll_locked -> [pll_locked, p0:pll_locked]
	signal pll0_pll_sharing_pll_c2p_write_clk           : std_logic;                      -- pll0:pll_c2p_write_clk -> [pll_c2p_write_clk, p0:pll_c2p_write_clk]
	signal pll0_pll_sharing_pll_write_clk_pre_phy_clk   : std_logic;                      -- pll0:pll_write_clk_pre_phy_clk -> [pll_write_clk_pre_phy_clk, p0:pll_write_clk_pre_phy_clk]
	signal pll0_pll_sharing_pll_write_clk               : std_logic;                      -- pll0:pll_write_clk -> [pll_write_clk, p0:pll_write_clk]
	signal p0_dll_clk_clk                               : std_logic;                      -- p0:dll_clk -> dll0:clk
	signal p0_dll_sharing_dll_pll_locked                : std_logic;                      -- p0:dll_pll_locked -> dll0:dll_pll_locked
	signal dll0_dll_sharing_dll_delayctrl               : std_logic_vector(6 downto 0);   -- dll0:dll_delayctrl -> p0:dll_delayctrl
	signal dmaster_master_waitrequest                   : std_logic;                      -- mm_interconnect_0:dmaster_master_waitrequest -> dmaster:master_waitrequest
	signal dmaster_master_writedata                     : std_logic_vector(31 downto 0);  -- dmaster:master_writedata -> mm_interconnect_0:dmaster_master_writedata
	signal dmaster_master_address                       : std_logic_vector(31 downto 0);  -- dmaster:master_address -> mm_interconnect_0:dmaster_master_address
	signal dmaster_master_write                         : std_logic;                      -- dmaster:master_write -> mm_interconnect_0:dmaster_master_write
	signal dmaster_master_read                          : std_logic;                      -- dmaster:master_read -> mm_interconnect_0:dmaster_master_read
	signal dmaster_master_readdata                      : std_logic_vector(31 downto 0);  -- mm_interconnect_0:dmaster_master_readdata -> dmaster:master_readdata
	signal dmaster_master_byteenable                    : std_logic_vector(3 downto 0);   -- dmaster:master_byteenable -> mm_interconnect_0:dmaster_master_byteenable
	signal dmaster_master_readdatavalid                 : std_logic;                      -- mm_interconnect_0:dmaster_master_readdatavalid -> dmaster:master_readdatavalid
	signal mm_interconnect_0_s0_seq_debug_waitrequest   : std_logic;                      -- s0:seq_waitrequest -> mm_interconnect_0:s0_seq_debug_waitrequest
	signal mm_interconnect_0_s0_seq_debug_burstcount    : std_logic_vector(0 downto 0);   -- mm_interconnect_0:s0_seq_debug_burstcount -> s0:seq_burstcount
	signal mm_interconnect_0_s0_seq_debug_writedata     : std_logic_vector(31 downto 0);  -- mm_interconnect_0:s0_seq_debug_writedata -> s0:seq_writedata
	signal mm_interconnect_0_s0_seq_debug_address       : std_logic_vector(31 downto 0);  -- mm_interconnect_0:s0_seq_debug_address -> s0:seq_address
	signal mm_interconnect_0_s0_seq_debug_write         : std_logic;                      -- mm_interconnect_0:s0_seq_debug_write -> s0:seq_write
	signal mm_interconnect_0_s0_seq_debug_read          : std_logic;                      -- mm_interconnect_0:s0_seq_debug_read -> s0:seq_read
	signal mm_interconnect_0_s0_seq_debug_readdata      : std_logic_vector(31 downto 0);  -- s0:seq_readdata -> mm_interconnect_0:s0_seq_debug_readdata
	signal mm_interconnect_0_s0_seq_debug_readdatavalid : std_logic;                      -- s0:seq_readdatavalid -> mm_interconnect_0:s0_seq_debug_readdatavalid
	signal mm_interconnect_0_s0_seq_debug_byteenable    : std_logic_vector(3 downto 0);   -- mm_interconnect_0:s0_seq_debug_byteenable -> s0:seq_byteenable
	signal p0_avl_reset_reset_ports_inv                 : std_logic;                      -- p0_avl_reset_reset:inv -> [dmaster:clk_reset_reset, mm_interconnect_0:dmaster_clk_reset_reset_bridge_in_reset_reset, mm_interconnect_0:dmaster_master_translator_reset_reset_bridge_in_reset_reset]

begin

	pll0 : component mem_if_ddr3_emif_0_example_design_example_sim_e0_if0_pll0
		port map (
			global_reset_n            => global_reset_n,                             -- global_reset.reset_n
			afi_clk                   => pll0_afi_clk_clk,                           --      afi_clk.clk
			afi_half_clk              => pll0_afi_half_clk_clk,                      -- afi_half_clk.clk
			pll_ref_clk               => pll_ref_clk,                                --  pll_ref_clk.clk
			pll_mem_clk               => pll0_pll_sharing_pll_mem_clk,               --  pll_sharing.pll_mem_clk
			pll_write_clk             => pll0_pll_sharing_pll_write_clk,             --             .pll_write_clk
			pll_locked                => pll0_pll_sharing_pll_locked,                --             .pll_locked
			pll_write_clk_pre_phy_clk => pll0_pll_sharing_pll_write_clk_pre_phy_clk, --             .pll_write_clk_pre_phy_clk
			pll_addr_cmd_clk          => pll0_pll_sharing_pll_addr_cmd_clk,          --             .pll_addr_cmd_clk
			pll_avl_clk               => pll0_pll_sharing_pll_avl_clk,               --             .pll_avl_clk
			pll_config_clk            => pll0_pll_sharing_pll_config_clk,            --             .pll_config_clk
			pll_hr_clk                => pll0_pll_sharing_pll_hr_clk,                --             .pll_hr_clk
			pll_p2c_read_clk          => pll0_pll_sharing_pll_p2c_read_clk,          --             .pll_p2c_read_clk
			pll_c2p_write_clk         => pll0_pll_sharing_pll_c2p_write_clk          --             .pll_c2p_write_clk
		);

	p0 : component mem_if_ddr3_emif_0_example_design_example_sim_e0_if0_p0
		port map (
			global_reset_n              => global_reset_n,                              --        global_reset.reset_n
			soft_reset_n                => soft_reset_n,                                --          soft_reset.reset_n
			csr_soft_reset_req          => dmaster_master_reset_reset,                  --  csr_soft_reset_req.reset
			afi_reset_n                 => p0_afi_reset_reset,                          --           afi_reset.reset_n
			afi_reset_export_n          => afi_reset_export_n,                          --    afi_reset_export.reset_n
			afi_clk                     => pll0_afi_clk_clk,                            --             afi_clk.clk
			afi_half_clk                => pll0_afi_half_clk_clk,                       --        afi_half_clk.clk
			addr_cmd_clk                => open,                                        --        addr_cmd_clk.clk
			avl_clk                     => p0_avl_clk_clk,                              --             avl_clk.clk
			avl_reset_n                 => p0_avl_reset_reset,                          --           avl_reset.reset_n
			scc_clk                     => p0_scc_clk_clk,                              --             scc_clk.clk
			scc_reset_n                 => p0_scc_reset_reset,                          --           scc_reset.reset_n
			dll_clk                     => p0_dll_clk_clk,                              --             dll_clk.clk
			afi_addr                    => m0_phy_mux_afi_addr,                         --                 afi.afi_addr
			afi_ba                      => m0_phy_mux_afi_ba,                           --                    .afi_ba
			afi_ras_n                   => m0_phy_mux_afi_ras_n,                        --                    .afi_ras_n
			afi_we_n                    => m0_phy_mux_afi_we_n,                         --                    .afi_we_n
			afi_cas_n                   => m0_phy_mux_afi_cas_n,                        --                    .afi_cas_n
			afi_odt                     => m0_phy_mux_afi_odt,                          --                    .afi_odt
			afi_cke                     => m0_phy_mux_afi_cke,                          --                    .afi_cke
			afi_cs_n                    => m0_phy_mux_afi_cs_n,                         --                    .afi_cs_n
			afi_dqs_burst               => m0_phy_mux_afi_dqs_burst,                    --                    .afi_dqs_burst
			afi_wdata_valid             => m0_phy_mux_afi_wdata_valid,                  --                    .afi_wdata_valid
			afi_wdata                   => m0_phy_mux_afi_wdata,                        --                    .afi_wdata
			afi_dm                      => m0_phy_mux_afi_dm,                           --                    .afi_dm
			afi_rdata                   => p0_afi_afi_rdata,                            --                    .afi_rdata
			afi_rst_n                   => m0_phy_mux_afi_rst_n,                        --                    .afi_rst_n
			afi_rdata_en                => m0_phy_mux_afi_rdata_en,                     --                    .afi_rdata_en
			afi_rdata_en_full           => m0_phy_mux_afi_rdata_en_full,                --                    .afi_rdata_en_full
			afi_rdata_valid             => p0_afi_afi_rdata_valid,                      --                    .afi_rdata_valid
			afi_cal_success             => p0_afi_afi_cal_success,                      --                    .afi_cal_success
			afi_cal_fail                => p0_afi_afi_cal_fail,                         --                    .afi_cal_fail
			afi_wlat                    => p0_afi_afi_wlat,                             --                    .afi_wlat
			afi_rlat                    => p0_afi_afi_rlat,                             --                    .afi_rlat
			phy_clk                     => p0_phy_phy_clk,                              --                 phy.phy_clk
			phy_reset_n                 => p0_phy_phy_reset_n,                          --                    .phy_reset_n
			phy_read_latency_counter    => s0_phy_phy_read_latency_counter,             --                    .phy_read_latency_counter
			phy_afi_wlat                => s0_phy_phy_afi_wlat,                         --                    .phy_afi_wlat
			phy_afi_rlat                => s0_phy_phy_afi_rlat,                         --                    .phy_afi_rlat
			phy_read_increment_vfifo_fr => s0_phy_phy_read_increment_vfifo_fr,          --                    .phy_read_increment_vfifo_fr
			phy_read_increment_vfifo_hr => s0_phy_phy_read_increment_vfifo_hr,          --                    .phy_read_increment_vfifo_hr
			phy_read_increment_vfifo_qr => s0_phy_phy_read_increment_vfifo_qr,          --                    .phy_read_increment_vfifo_qr
			phy_reset_mem_stable        => s0_phy_phy_reset_mem_stable,                 --                    .phy_reset_mem_stable
			phy_cal_success             => s0_phy_phy_cal_success,                      --                    .phy_cal_success
			phy_cal_fail                => s0_phy_phy_cal_fail,                         --                    .phy_cal_fail
			phy_cal_debug_info          => s0_phy_phy_cal_debug_info,                   --                    .phy_cal_debug_info
			phy_read_fifo_reset         => s0_phy_phy_read_fifo_reset,                  --                    .phy_read_fifo_reset
			phy_vfifo_rd_en_override    => s0_phy_phy_vfifo_rd_en_override,             --                    .phy_vfifo_rd_en_override
			phy_read_fifo_q             => p0_phy_phy_read_fifo_q,                      --                    .phy_read_fifo_q
			phy_write_fr_cycle_shifts   => s0_phy_phy_write_fr_cycle_shifts,            --                    .phy_write_fr_cycle_shifts
			calib_skip_steps            => p0_calib_calib_skip_steps,                   --               calib.calib_skip_steps
			scc_data                    => s0_scc_scc_data,                             --                 scc.scc_data
			scc_dqs_ena                 => s0_scc_scc_dqs_ena,                          --                    .scc_dqs_ena
			scc_dqs_io_ena              => s0_scc_scc_dqs_io_ena,                       --                    .scc_dqs_io_ena
			scc_dq_ena                  => s0_scc_scc_dq_ena,                           --                    .scc_dq_ena
			scc_dm_ena                  => s0_scc_scc_dm_ena,                           --                    .scc_dm_ena
			capture_strobe_tracking     => p0_scc_capture_strobe_tracking,              --                    .capture_strobe_tracking
			scc_upd                     => s0_scc_scc_upd,                              --                    .scc_upd
			afi_mem_clk_disable         => c0_afi_afi_mem_clk_disable,                  -- afi_mem_clk_disable.afi_mem_clk_disable
			pll_mem_clk                 => pll0_pll_sharing_pll_mem_clk,                --         pll_sharing.pll_mem_clk
			pll_write_clk               => pll0_pll_sharing_pll_write_clk,              --                    .pll_write_clk
			pll_locked                  => pll0_pll_sharing_pll_locked,                 --                    .pll_locked
			pll_write_clk_pre_phy_clk   => pll0_pll_sharing_pll_write_clk_pre_phy_clk,  --                    .pll_write_clk_pre_phy_clk
			pll_addr_cmd_clk            => pll0_pll_sharing_pll_addr_cmd_clk,           --                    .pll_addr_cmd_clk
			pll_avl_clk                 => pll0_pll_sharing_pll_avl_clk,                --                    .pll_avl_clk
			pll_config_clk              => pll0_pll_sharing_pll_config_clk,             --                    .pll_config_clk
			pll_hr_clk                  => pll0_pll_sharing_pll_hr_clk,                 --                    .pll_hr_clk
			pll_p2c_read_clk            => pll0_pll_sharing_pll_p2c_read_clk,           --                    .pll_p2c_read_clk
			pll_c2p_write_clk           => pll0_pll_sharing_pll_c2p_write_clk,          --                    .pll_c2p_write_clk
			dll_pll_locked              => p0_dll_sharing_dll_pll_locked,               --         dll_sharing.dll_pll_locked
			dll_delayctrl               => dll0_dll_sharing_dll_delayctrl,              --                    .dll_delayctrl
			seriesterminationcontrol    => oct0_oct_sharing_seriesterminationcontrol,   --         oct_sharing.seriesterminationcontrol
			parallelterminationcontrol  => oct0_oct_sharing_parallelterminationcontrol, --                    .parallelterminationcontrol
			mem_a                       => mem_a,                                       --              memory.mem_a
			mem_ba                      => mem_ba,                                      --                    .mem_ba
			mem_ck                      => mem_ck,                                      --                    .mem_ck
			mem_ck_n                    => mem_ck_n,                                    --                    .mem_ck_n
			mem_cke                     => mem_cke,                                     --                    .mem_cke
			mem_cs_n                    => mem_cs_n,                                    --                    .mem_cs_n
			mem_dm                      => mem_dm,                                      --                    .mem_dm
			mem_ras_n                   => mem_ras_n,                                   --                    .mem_ras_n
			mem_cas_n                   => mem_cas_n,                                   --                    .mem_cas_n
			mem_we_n                    => mem_we_n,                                    --                    .mem_we_n
			mem_reset_n                 => mem_reset_n,                                 --                    .mem_reset_n
			mem_dq                      => mem_dq,                                      --                    .mem_dq
			mem_dqs                     => mem_dqs,                                     --                    .mem_dqs
			mem_dqs_n                   => mem_dqs_n,                                   --                    .mem_dqs_n
			mem_odt                     => mem_odt                                      --                    .mem_odt
		);

	m0 : component afi_mux_ddr3_ddrx
		generic map (
			AFI_RATE_RATIO            => 4,
			AFI_ADDR_WIDTH            => 56,
			AFI_BANKADDR_WIDTH        => 12,
			AFI_CONTROL_WIDTH         => 4,
			AFI_CS_WIDTH              => 4,
			AFI_CLK_EN_WIDTH          => 4,
			AFI_DM_WIDTH              => 64,
			AFI_DQ_WIDTH              => 512,
			AFI_ODT_WIDTH             => 4,
			AFI_WRITE_DQS_WIDTH       => 32,
			AFI_RLAT_WIDTH            => 6,
			AFI_WLAT_WIDTH            => 6,
			AFI_RRANK_WIDTH           => 32,
			AFI_WRANK_WIDTH           => 32,
			MRS_MIRROR_PING_PONG_ATSO => false
		)
		port map (
			clk                   => pll0_afi_clk_clk,             --     clk.clk
			afi_addr              => c0_afi_afi_addr,              --     afi.afi_addr
			afi_ba                => c0_afi_afi_ba,                --        .afi_ba
			afi_ras_n             => c0_afi_afi_ras_n,             --        .afi_ras_n
			afi_we_n              => c0_afi_afi_we_n,              --        .afi_we_n
			afi_cas_n             => c0_afi_afi_cas_n,             --        .afi_cas_n
			afi_odt               => c0_afi_afi_odt,               --        .afi_odt
			afi_cke               => c0_afi_afi_cke,               --        .afi_cke
			afi_cs_n              => c0_afi_afi_cs_n,              --        .afi_cs_n
			afi_dqs_burst         => c0_afi_afi_dqs_burst,         --        .afi_dqs_burst
			afi_wdata_valid       => c0_afi_afi_wdata_valid,       --        .afi_wdata_valid
			afi_wdata             => c0_afi_afi_wdata,             --        .afi_wdata
			afi_dm                => c0_afi_afi_dm,                --        .afi_dm
			afi_rdata             => m0_afi_afi_rdata,             --        .afi_rdata
			afi_rst_n             => c0_afi_afi_rst_n,             --        .afi_rst_n
			afi_rdata_en          => c0_afi_afi_rdata_en,          --        .afi_rdata_en
			afi_rdata_en_full     => c0_afi_afi_rdata_en_full,     --        .afi_rdata_en_full
			afi_rdata_valid       => m0_afi_afi_rdata_valid,       --        .afi_rdata_valid
			afi_cal_success       => m0_afi_afi_cal_success,       --        .afi_cal_success
			afi_cal_fail          => m0_afi_afi_cal_fail,          --        .afi_cal_fail
			afi_wlat              => m0_afi_afi_wlat,              --        .afi_wlat
			afi_rlat              => m0_afi_afi_rlat,              --        .afi_rlat
			phy_mux_addr          => m0_phy_mux_afi_addr,          -- phy_mux.afi_addr
			phy_mux_ba            => m0_phy_mux_afi_ba,            --        .afi_ba
			phy_mux_ras_n         => m0_phy_mux_afi_ras_n,         --        .afi_ras_n
			phy_mux_we_n          => m0_phy_mux_afi_we_n,          --        .afi_we_n
			phy_mux_cas_n         => m0_phy_mux_afi_cas_n,         --        .afi_cas_n
			phy_mux_odt           => m0_phy_mux_afi_odt,           --        .afi_odt
			phy_mux_cke           => m0_phy_mux_afi_cke,           --        .afi_cke
			phy_mux_cs_n          => m0_phy_mux_afi_cs_n,          --        .afi_cs_n
			phy_mux_dqs_burst     => m0_phy_mux_afi_dqs_burst,     --        .afi_dqs_burst
			phy_mux_wdata_valid   => m0_phy_mux_afi_wdata_valid,   --        .afi_wdata_valid
			phy_mux_wdata         => m0_phy_mux_afi_wdata,         --        .afi_wdata
			phy_mux_dm            => m0_phy_mux_afi_dm,            --        .afi_dm
			phy_mux_rdata         => p0_afi_afi_rdata,             --        .afi_rdata
			phy_mux_rst_n         => m0_phy_mux_afi_rst_n,         --        .afi_rst_n
			phy_mux_rdata_en      => m0_phy_mux_afi_rdata_en,      --        .afi_rdata_en
			phy_mux_rdata_en_full => m0_phy_mux_afi_rdata_en_full, --        .afi_rdata_en_full
			phy_mux_rdata_valid   => p0_afi_afi_rdata_valid,       --        .afi_rdata_valid
			phy_mux_cal_success   => p0_afi_afi_cal_success,       --        .afi_cal_success
			phy_mux_cal_fail      => p0_afi_afi_cal_fail,          --        .afi_cal_fail
			phy_mux_wlat          => p0_afi_afi_wlat,              --        .afi_wlat
			phy_mux_rlat          => p0_afi_afi_rlat,              --        .afi_rlat
			seq_mux_addr          => s0_afi_afi_addr,              -- seq_mux.afi_addr
			seq_mux_ba            => s0_afi_afi_ba,                --        .afi_ba
			seq_mux_ras_n         => s0_afi_afi_ras_n,             --        .afi_ras_n
			seq_mux_we_n          => s0_afi_afi_we_n,              --        .afi_we_n
			seq_mux_cas_n         => s0_afi_afi_cas_n,             --        .afi_cas_n
			seq_mux_odt           => s0_afi_afi_odt,               --        .afi_odt
			seq_mux_cke           => s0_afi_afi_cke,               --        .afi_cke
			seq_mux_cs_n          => s0_afi_afi_cs_n,              --        .afi_cs_n
			seq_mux_dqs_burst     => s0_afi_afi_dqs_burst,         --        .afi_dqs_burst
			seq_mux_wdata_valid   => s0_afi_afi_wdata_valid,       --        .afi_wdata_valid
			seq_mux_wdata         => s0_afi_afi_wdata,             --        .afi_wdata
			seq_mux_dm            => s0_afi_afi_dm,                --        .afi_dm
			seq_mux_rdata         => m0_seq_mux_afi_rdata,         --        .afi_rdata
			seq_mux_rst_n         => s0_afi_afi_rst_n,             --        .afi_rst_n
			seq_mux_rdata_en      => s0_afi_afi_rdata_en,          --        .afi_rdata_en
			seq_mux_rdata_en_full => s0_afi_afi_rdata_en_full,     --        .afi_rdata_en_full
			seq_mux_rdata_valid   => m0_seq_mux_afi_rdata_valid,   --        .afi_rdata_valid
			mux_sel               => s0_mux_sel_mux_sel            -- mux_sel.mux_sel
		);

	s0 : component mem_if_ddr3_emif_0_example_design_example_sim_e0_if0_s0
		port map (
			avl_clk                     => p0_avl_clk_clk,                               --          avl_clk.clk
			avl_reset_n                 => p0_avl_reset_reset,                           --        avl_reset.reset_n
			scc_clk                     => p0_scc_clk_clk,                               --          scc_clk.clk
			reset_n_scc_clk             => p0_scc_reset_reset,                           --        scc_reset.reset_n
			scc_data                    => s0_scc_scc_data,                              --              scc.scc_data
			scc_dqs_ena                 => s0_scc_scc_dqs_ena,                           --                 .scc_dqs_ena
			scc_dqs_io_ena              => s0_scc_scc_dqs_io_ena,                        --                 .scc_dqs_io_ena
			scc_dq_ena                  => s0_scc_scc_dq_ena,                            --                 .scc_dq_ena
			scc_dm_ena                  => s0_scc_scc_dm_ena,                            --                 .scc_dm_ena
			capture_strobe_tracking     => p0_scc_capture_strobe_tracking,               --                 .capture_strobe_tracking
			scc_upd                     => s0_scc_scc_upd,                               --                 .scc_upd
			afi_init_req                => c0_afi_afi_init_req,                          -- afi_init_cal_req.afi_init_req
			afi_cal_req                 => c0_afi_afi_cal_req,                           --                 .afi_cal_req
			phy_clk                     => p0_phy_phy_clk,                               --              phy.phy_clk
			phy_reset_n                 => p0_phy_phy_reset_n,                           --                 .phy_reset_n
			phy_read_latency_counter    => s0_phy_phy_read_latency_counter,              --                 .phy_read_latency_counter
			phy_afi_wlat                => s0_phy_phy_afi_wlat,                          --                 .phy_afi_wlat
			phy_afi_rlat                => s0_phy_phy_afi_rlat,                          --                 .phy_afi_rlat
			phy_read_increment_vfifo_fr => s0_phy_phy_read_increment_vfifo_fr,           --                 .phy_read_increment_vfifo_fr
			phy_read_increment_vfifo_hr => s0_phy_phy_read_increment_vfifo_hr,           --                 .phy_read_increment_vfifo_hr
			phy_read_increment_vfifo_qr => s0_phy_phy_read_increment_vfifo_qr,           --                 .phy_read_increment_vfifo_qr
			phy_reset_mem_stable        => s0_phy_phy_reset_mem_stable,                  --                 .phy_reset_mem_stable
			phy_cal_success             => s0_phy_phy_cal_success,                       --                 .phy_cal_success
			phy_cal_fail                => s0_phy_phy_cal_fail,                          --                 .phy_cal_fail
			phy_cal_debug_info          => s0_phy_phy_cal_debug_info,                    --                 .phy_cal_debug_info
			phy_read_fifo_reset         => s0_phy_phy_read_fifo_reset,                   --                 .phy_read_fifo_reset
			phy_vfifo_rd_en_override    => s0_phy_phy_vfifo_rd_en_override,              --                 .phy_vfifo_rd_en_override
			phy_read_fifo_q             => p0_phy_phy_read_fifo_q,                       --                 .phy_read_fifo_q
			phy_write_fr_cycle_shifts   => s0_phy_phy_write_fr_cycle_shifts,             --                 .phy_write_fr_cycle_shifts
			calib_skip_steps            => p0_calib_calib_skip_steps,                    --            calib.calib_skip_steps
			phy_mux_sel                 => s0_mux_sel_mux_sel,                           --          mux_sel.mux_sel
			afi_clk                     => pll0_afi_clk_clk,                             --          afi_clk.clk
			afi_reset_n                 => p0_afi_reset_reset,                           --        afi_reset.reset_n
			afi_addr                    => s0_afi_afi_addr,                              --              afi.afi_addr
			afi_ba                      => s0_afi_afi_ba,                                --                 .afi_ba
			afi_ras_n                   => s0_afi_afi_ras_n,                             --                 .afi_ras_n
			afi_we_n                    => s0_afi_afi_we_n,                              --                 .afi_we_n
			afi_cas_n                   => s0_afi_afi_cas_n,                             --                 .afi_cas_n
			afi_odt                     => s0_afi_afi_odt,                               --                 .afi_odt
			afi_cke                     => s0_afi_afi_cke,                               --                 .afi_cke
			afi_cs_n                    => s0_afi_afi_cs_n,                              --                 .afi_cs_n
			afi_dqs_burst               => s0_afi_afi_dqs_burst,                         --                 .afi_dqs_burst
			afi_wdata_valid             => s0_afi_afi_wdata_valid,                       --                 .afi_wdata_valid
			afi_wdata                   => s0_afi_afi_wdata,                             --                 .afi_wdata
			afi_dm                      => s0_afi_afi_dm,                                --                 .afi_dm
			afi_rdata                   => m0_seq_mux_afi_rdata,                         --                 .afi_rdata
			afi_rst_n                   => s0_afi_afi_rst_n,                             --                 .afi_rst_n
			afi_rdata_en                => s0_afi_afi_rdata_en,                          --                 .afi_rdata_en
			afi_rdata_en_full           => s0_afi_afi_rdata_en_full,                     --                 .afi_rdata_en_full
			afi_rdata_valid             => m0_seq_mux_afi_rdata_valid,                   --                 .afi_rdata_valid
			afi_seq_busy                => s0_tracking_afi_seq_busy,                     --         tracking.afi_seq_busy
			afi_ctl_refresh_done        => c0_afi_afi_ctl_refresh_done,                  --                 .afi_ctl_refresh_done
			afi_ctl_long_idle           => c0_afi_afi_ctl_long_idle,                     --                 .afi_ctl_long_idle
			seq_waitrequest             => mm_interconnect_0_s0_seq_debug_waitrequest,   --        seq_debug.waitrequest
			seq_readdata                => mm_interconnect_0_s0_seq_debug_readdata,      --                 .readdata
			seq_readdatavalid           => mm_interconnect_0_s0_seq_debug_readdatavalid, --                 .readdatavalid
			seq_burstcount              => mm_interconnect_0_s0_seq_debug_burstcount,    --                 .burstcount
			seq_writedata               => mm_interconnect_0_s0_seq_debug_writedata,     --                 .writedata
			seq_address                 => mm_interconnect_0_s0_seq_debug_address,       --                 .address
			seq_write                   => mm_interconnect_0_s0_seq_debug_write,         --                 .write
			seq_read                    => mm_interconnect_0_s0_seq_debug_read,          --                 .read
			seq_byteenable              => mm_interconnect_0_s0_seq_debug_byteenable,    --                 .byteenable
			seq_debugaccess             => '0'                                           --      (terminated)
		);

	dmaster : component mem_if_ddr3_emif_0_example_design_example_sim_e0_if0_dmaster
		port map (
			clk_clk              => p0_avl_clk_clk,               --          clk.clk
			clk_reset_reset      => p0_avl_reset_reset_ports_inv, --    clk_reset.reset
			master_address       => dmaster_master_address,       --       master.address
			master_readdata      => dmaster_master_readdata,      --             .readdata
			master_read          => dmaster_master_read,          --             .read
			master_write         => dmaster_master_write,         --             .write
			master_writedata     => dmaster_master_writedata,     --             .writedata
			master_waitrequest   => dmaster_master_waitrequest,   --             .waitrequest
			master_readdatavalid => dmaster_master_readdatavalid, --             .readdatavalid
			master_byteenable    => dmaster_master_byteenable,    --             .byteenable
			master_reset_reset   => dmaster_master_reset_reset    -- master_reset.reset
		);

	c0 : component mem_if_ddr3_emif_0_example_design_example_sim_e0_if0_c0
		port map (
			afi_reset_n          => p0_afi_reset_reset,          --    afi_reset.reset_n
			afi_clk              => pll0_afi_clk_clk,            --      afi_clk.clk
			afi_half_clk         => pll0_afi_half_clk_clk,       -- afi_half_clk.clk
			local_init_done      => local_init_done,             --       status.local_init_done
			local_cal_success    => local_cal_success,           --             .local_cal_success
			local_cal_fail       => local_cal_fail,              --             .local_cal_fail
			afi_addr             => c0_afi_afi_addr,             --          afi.afi_addr
			afi_ba               => c0_afi_afi_ba,               --             .afi_ba
			afi_ras_n            => c0_afi_afi_ras_n,            --             .afi_ras_n
			afi_we_n             => c0_afi_afi_we_n,             --             .afi_we_n
			afi_cas_n            => c0_afi_afi_cas_n,            --             .afi_cas_n
			afi_odt              => c0_afi_afi_odt,              --             .afi_odt
			afi_cke              => c0_afi_afi_cke,              --             .afi_cke
			afi_cs_n             => c0_afi_afi_cs_n,             --             .afi_cs_n
			afi_dqs_burst        => c0_afi_afi_dqs_burst,        --             .afi_dqs_burst
			afi_wdata_valid      => c0_afi_afi_wdata_valid,      --             .afi_wdata_valid
			afi_wdata            => c0_afi_afi_wdata,            --             .afi_wdata
			afi_dm               => c0_afi_afi_dm,               --             .afi_dm
			afi_rdata            => m0_afi_afi_rdata,            --             .afi_rdata
			afi_rst_n            => c0_afi_afi_rst_n,            --             .afi_rst_n
			afi_mem_clk_disable  => c0_afi_afi_mem_clk_disable,  --             .afi_mem_clk_disable
			afi_init_req         => c0_afi_afi_init_req,         --             .afi_init_req
			afi_cal_req          => c0_afi_afi_cal_req,          --             .afi_cal_req
			afi_seq_busy         => s0_tracking_afi_seq_busy,    --             .afi_seq_busy
			afi_ctl_refresh_done => c0_afi_afi_ctl_refresh_done, --             .afi_ctl_refresh_done
			afi_ctl_long_idle    => c0_afi_afi_ctl_long_idle,    --             .afi_ctl_long_idle
			afi_rdata_en         => c0_afi_afi_rdata_en,         --             .afi_rdata_en
			afi_rdata_en_full    => c0_afi_afi_rdata_en_full,    --             .afi_rdata_en_full
			afi_rdata_valid      => m0_afi_afi_rdata_valid,      --             .afi_rdata_valid
			afi_cal_success      => m0_afi_afi_cal_success,      --             .afi_cal_success
			afi_cal_fail         => m0_afi_afi_cal_fail,         --             .afi_cal_fail
			afi_wlat             => m0_afi_afi_wlat,             --             .afi_wlat
			afi_rlat             => m0_afi_afi_rlat,             --             .afi_rlat
			local_refresh_req    => local_refresh_req,           -- user_refresh.local_refresh_req
			local_refresh_chip   => local_refresh_chip,          --             .local_refresh_chip
			local_refresh_ack    => local_refresh_ack,           --             .local_refresh_ack
			avl_ready            => avl_ready,                   --          avl.waitrequest_n
			avl_burstbegin       => avl_burstbegin,              --             .beginbursttransfer
			avl_addr             => avl_addr,                    --             .address
			avl_rdata_valid      => avl_rdata_valid,             --             .readdatavalid
			avl_rdata            => avl_rdata,                   --             .readdata
			avl_wdata            => avl_wdata,                   --             .writedata
			avl_be               => avl_be,                      --             .byteenable
			avl_read_req         => avl_read_req,                --             .read
			avl_write_req        => avl_write_req,               --             .write
			avl_size             => avl_size                     --             .burstcount
		);

	oct0 : component altera_mem_if_oct_stratixv
		generic map (
			OCT_TERM_CONTROL_WIDTH => 16
		)
		port map (
			oct_rzqin                  => oct_rzqin,                                   --         oct.rzqin
			seriesterminationcontrol   => oct0_oct_sharing_seriesterminationcontrol,   -- oct_sharing.seriesterminationcontrol
			parallelterminationcontrol => oct0_oct_sharing_parallelterminationcontrol  --            .parallelterminationcontrol
		);

	dll0 : component altera_mem_if_dll_stratixv
		generic map (
			DLL_DELAY_CTRL_WIDTH       => 7,
			DLL_OFFSET_CTRL_WIDTH      => 6,
			DELAY_BUFFER_MODE          => "HIGH",
			DELAY_CHAIN_LENGTH         => 8,
			DLL_INPUT_FREQUENCY_PS_STR => "1250 ps"
		)
		port map (
			clk            => p0_dll_clk_clk,                 --         clk.clk
			dll_pll_locked => p0_dll_sharing_dll_pll_locked,  -- dll_sharing.dll_pll_locked
			dll_delayctrl  => dll0_dll_sharing_dll_delayctrl  --            .dll_delayctrl
		);

	mm_interconnect_0 : component mem_if_ddr3_emif_0_example_design_example_sim_e0_if0_mm_interconnect_0
		port map (
			p0_avl_clk_clk                                              => p0_avl_clk_clk,                               --                                            p0_avl_clk.clk
			dmaster_clk_reset_reset_bridge_in_reset_reset               => p0_avl_reset_reset_ports_inv,                 --               dmaster_clk_reset_reset_bridge_in_reset.reset
			dmaster_master_translator_reset_reset_bridge_in_reset_reset => p0_avl_reset_reset_ports_inv,                 -- dmaster_master_translator_reset_reset_bridge_in_reset.reset
			dmaster_master_address                                      => dmaster_master_address,                       --                                        dmaster_master.address
			dmaster_master_waitrequest                                  => dmaster_master_waitrequest,                   --                                                      .waitrequest
			dmaster_master_byteenable                                   => dmaster_master_byteenable,                    --                                                      .byteenable
			dmaster_master_read                                         => dmaster_master_read,                          --                                                      .read
			dmaster_master_readdata                                     => dmaster_master_readdata,                      --                                                      .readdata
			dmaster_master_readdatavalid                                => dmaster_master_readdatavalid,                 --                                                      .readdatavalid
			dmaster_master_write                                        => dmaster_master_write,                         --                                                      .write
			dmaster_master_writedata                                    => dmaster_master_writedata,                     --                                                      .writedata
			s0_seq_debug_address                                        => mm_interconnect_0_s0_seq_debug_address,       --                                          s0_seq_debug.address
			s0_seq_debug_write                                          => mm_interconnect_0_s0_seq_debug_write,         --                                                      .write
			s0_seq_debug_read                                           => mm_interconnect_0_s0_seq_debug_read,          --                                                      .read
			s0_seq_debug_readdata                                       => mm_interconnect_0_s0_seq_debug_readdata,      --                                                      .readdata
			s0_seq_debug_writedata                                      => mm_interconnect_0_s0_seq_debug_writedata,     --                                                      .writedata
			s0_seq_debug_burstcount                                     => mm_interconnect_0_s0_seq_debug_burstcount,    --                                                      .burstcount
			s0_seq_debug_byteenable                                     => mm_interconnect_0_s0_seq_debug_byteenable,    --                                                      .byteenable
			s0_seq_debug_readdatavalid                                  => mm_interconnect_0_s0_seq_debug_readdatavalid, --                                                      .readdatavalid
			s0_seq_debug_waitrequest                                    => mm_interconnect_0_s0_seq_debug_waitrequest    --                                                      .waitrequest
		);

	p0_avl_reset_reset_ports_inv <= not p0_avl_reset_reset;

	afi_clk <= pll0_afi_clk_clk;

	afi_half_clk <= pll0_afi_half_clk_clk;

	afi_reset_n <= p0_afi_reset_reset;

	pll_avl_clk <= pll0_pll_sharing_pll_avl_clk;

	pll_hr_clk <= pll0_pll_sharing_pll_hr_clk;

	pll_p2c_read_clk <= pll0_pll_sharing_pll_p2c_read_clk;

	pll_config_clk <= pll0_pll_sharing_pll_config_clk;

	pll_addr_cmd_clk <= pll0_pll_sharing_pll_addr_cmd_clk;

	pll_mem_clk <= pll0_pll_sharing_pll_mem_clk;

	pll_locked <= pll0_pll_sharing_pll_locked;

	pll_c2p_write_clk <= pll0_pll_sharing_pll_c2p_write_clk;

	pll_write_clk_pre_phy_clk <= pll0_pll_sharing_pll_write_clk_pre_phy_clk;

	pll_write_clk <= pll0_pll_sharing_pll_write_clk;

end architecture rtl; -- of mem_if_ddr3_emif_0_example_design_example_sim_e0_if0
