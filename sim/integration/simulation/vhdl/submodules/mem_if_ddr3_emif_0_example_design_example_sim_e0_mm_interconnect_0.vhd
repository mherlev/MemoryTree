-- mem_if_ddr3_emif_0_example_design_example_sim_e0_mm_interconnect_0.vhd

-- This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
-- will probably be lost.
-- 
-- Generated using ACDS version 14.0 200 at 2016.05.21.21:51:07

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity mem_if_ddr3_emif_0_example_design_example_sim_e0_mm_interconnect_0 is
	port (
		if0_afi_clk_clk                                     : in  std_logic                      := '0';             --                                   if0_afi_clk.clk
		d0_avl_reset_reset_bridge_in_reset_reset            : in  std_logic                      := '0';             --            d0_avl_reset_reset_bridge_in_reset.reset
		d0_avl_translator_reset_reset_bridge_in_reset_reset : in  std_logic                      := '0';             -- d0_avl_translator_reset_reset_bridge_in_reset.reset
		d0_avl_address                                      : in  std_logic_vector(29 downto 0)  := (others => '0'); --                                        d0_avl.address
		d0_avl_waitrequest                                  : out std_logic;                                         --                                              .waitrequest
		d0_avl_burstcount                                   : in  std_logic_vector(0 downto 0)   := (others => '0'); --                                              .burstcount
		d0_avl_byteenable                                   : in  std_logic_vector(63 downto 0)  := (others => '0'); --                                              .byteenable
		d0_avl_beginbursttransfer                           : in  std_logic                      := '0';             --                                              .beginbursttransfer
		d0_avl_read                                         : in  std_logic                      := '0';             --                                              .read
		d0_avl_readdata                                     : out std_logic_vector(511 downto 0);                    --                                              .readdata
		d0_avl_readdatavalid                                : out std_logic;                                         --                                              .readdatavalid
		d0_avl_write                                        : in  std_logic                      := '0';             --                                              .write
		d0_avl_writedata                                    : in  std_logic_vector(511 downto 0) := (others => '0'); --                                              .writedata
		if0_avl_address                                     : out std_logic_vector(23 downto 0);                     --                                       if0_avl.address
		if0_avl_write                                       : out std_logic;                                         --                                              .write
		if0_avl_read                                        : out std_logic;                                         --                                              .read
		if0_avl_readdata                                    : in  std_logic_vector(511 downto 0) := (others => '0'); --                                              .readdata
		if0_avl_writedata                                   : out std_logic_vector(511 downto 0);                    --                                              .writedata
		if0_avl_beginbursttransfer                          : out std_logic;                                         --                                              .beginbursttransfer
		if0_avl_burstcount                                  : out std_logic_vector(0 downto 0);                      --                                              .burstcount
		if0_avl_byteenable                                  : out std_logic_vector(63 downto 0);                     --                                              .byteenable
		if0_avl_readdatavalid                               : in  std_logic                      := '0';             --                                              .readdatavalid
		if0_avl_waitrequest                                 : in  std_logic                      := '0'              --                                              .waitrequest
	);
end entity mem_if_ddr3_emif_0_example_design_example_sim_e0_mm_interconnect_0;

architecture rtl of mem_if_ddr3_emif_0_example_design_example_sim_e0_mm_interconnect_0 is
	component altera_merlin_master_translator is
		generic (
			AV_ADDRESS_W                : integer := 32;
			AV_DATA_W                   : integer := 32;
			AV_BURSTCOUNT_W             : integer := 4;
			AV_BYTEENABLE_W             : integer := 4;
			UAV_ADDRESS_W               : integer := 38;
			UAV_BURSTCOUNT_W            : integer := 10;
			USE_READ                    : integer := 1;
			USE_WRITE                   : integer := 1;
			USE_BEGINBURSTTRANSFER      : integer := 0;
			USE_BEGINTRANSFER           : integer := 0;
			USE_CHIPSELECT              : integer := 0;
			USE_BURSTCOUNT              : integer := 1;
			USE_READDATAVALID           : integer := 1;
			USE_WAITREQUEST             : integer := 1;
			USE_READRESPONSE            : integer := 0;
			USE_WRITERESPONSE           : integer := 0;
			AV_SYMBOLS_PER_WORD         : integer := 4;
			AV_ADDRESS_SYMBOLS          : integer := 0;
			AV_BURSTCOUNT_SYMBOLS       : integer := 0;
			AV_CONSTANT_BURST_BEHAVIOR  : integer := 0;
			UAV_CONSTANT_BURST_BEHAVIOR : integer := 0;
			AV_LINEWRAPBURSTS           : integer := 0;
			AV_REGISTERINCOMINGSIGNALS  : integer := 0
		);
		port (
			clk                      : in  std_logic                      := 'X';             -- clk
			reset                    : in  std_logic                      := 'X';             -- reset
			uav_address              : out std_logic_vector(29 downto 0);                     -- address
			uav_burstcount           : out std_logic_vector(6 downto 0);                      -- burstcount
			uav_read                 : out std_logic;                                         -- read
			uav_write                : out std_logic;                                         -- write
			uav_waitrequest          : in  std_logic                      := 'X';             -- waitrequest
			uav_readdatavalid        : in  std_logic                      := 'X';             -- readdatavalid
			uav_byteenable           : out std_logic_vector(63 downto 0);                     -- byteenable
			uav_readdata             : in  std_logic_vector(511 downto 0) := (others => 'X'); -- readdata
			uav_writedata            : out std_logic_vector(511 downto 0);                    -- writedata
			uav_lock                 : out std_logic;                                         -- lock
			uav_debugaccess          : out std_logic;                                         -- debugaccess
			av_address               : in  std_logic_vector(29 downto 0)  := (others => 'X'); -- address
			av_waitrequest           : out std_logic;                                         -- waitrequest
			av_burstcount            : in  std_logic_vector(0 downto 0)   := (others => 'X'); -- burstcount
			av_byteenable            : in  std_logic_vector(63 downto 0)  := (others => 'X'); -- byteenable
			av_beginbursttransfer    : in  std_logic                      := 'X';             -- beginbursttransfer
			av_read                  : in  std_logic                      := 'X';             -- read
			av_readdata              : out std_logic_vector(511 downto 0);                    -- readdata
			av_readdatavalid         : out std_logic;                                         -- readdatavalid
			av_write                 : in  std_logic                      := 'X';             -- write
			av_writedata             : in  std_logic_vector(511 downto 0) := (others => 'X'); -- writedata
			av_begintransfer         : in  std_logic                      := 'X';             -- begintransfer
			av_chipselect            : in  std_logic                      := 'X';             -- chipselect
			av_lock                  : in  std_logic                      := 'X';             -- lock
			av_debugaccess           : in  std_logic                      := 'X';             -- debugaccess
			uav_clken                : out std_logic;                                         -- clken
			av_clken                 : in  std_logic                      := 'X';             -- clken
			uav_response             : in  std_logic_vector(1 downto 0)   := (others => 'X'); -- response
			av_response              : out std_logic_vector(1 downto 0);                      -- response
			uav_writeresponserequest : out std_logic;                                         -- writeresponserequest
			uav_writeresponsevalid   : in  std_logic                      := 'X';             -- writeresponsevalid
			av_writeresponserequest  : in  std_logic                      := 'X';             -- writeresponserequest
			av_writeresponsevalid    : out std_logic                                          -- writeresponsevalid
		);
	end component altera_merlin_master_translator;

	component altera_merlin_slave_translator is
		generic (
			AV_ADDRESS_W                   : integer := 30;
			AV_DATA_W                      : integer := 32;
			UAV_DATA_W                     : integer := 32;
			AV_BURSTCOUNT_W                : integer := 4;
			AV_BYTEENABLE_W                : integer := 4;
			UAV_BYTEENABLE_W               : integer := 4;
			UAV_ADDRESS_W                  : integer := 32;
			UAV_BURSTCOUNT_W               : integer := 4;
			AV_READLATENCY                 : integer := 0;
			USE_READDATAVALID              : integer := 1;
			USE_WAITREQUEST                : integer := 1;
			USE_UAV_CLKEN                  : integer := 0;
			USE_READRESPONSE               : integer := 0;
			USE_WRITERESPONSE              : integer := 0;
			AV_SYMBOLS_PER_WORD            : integer := 4;
			AV_ADDRESS_SYMBOLS             : integer := 0;
			AV_BURSTCOUNT_SYMBOLS          : integer := 0;
			AV_CONSTANT_BURST_BEHAVIOR     : integer := 0;
			UAV_CONSTANT_BURST_BEHAVIOR    : integer := 0;
			AV_REQUIRE_UNALIGNED_ADDRESSES : integer := 0;
			CHIPSELECT_THROUGH_READLATENCY : integer := 0;
			AV_READ_WAIT_CYCLES            : integer := 0;
			AV_WRITE_WAIT_CYCLES           : integer := 0;
			AV_SETUP_WAIT_CYCLES           : integer := 0;
			AV_DATA_HOLD_CYCLES            : integer := 0
		);
		port (
			clk                      : in  std_logic                      := 'X';             -- clk
			reset                    : in  std_logic                      := 'X';             -- reset
			uav_address              : in  std_logic_vector(29 downto 0)  := (others => 'X'); -- address
			uav_burstcount           : in  std_logic_vector(6 downto 0)   := (others => 'X'); -- burstcount
			uav_read                 : in  std_logic                      := 'X';             -- read
			uav_write                : in  std_logic                      := 'X';             -- write
			uav_waitrequest          : out std_logic;                                         -- waitrequest
			uav_readdatavalid        : out std_logic;                                         -- readdatavalid
			uav_byteenable           : in  std_logic_vector(63 downto 0)  := (others => 'X'); -- byteenable
			uav_readdata             : out std_logic_vector(511 downto 0);                    -- readdata
			uav_writedata            : in  std_logic_vector(511 downto 0) := (others => 'X'); -- writedata
			uav_lock                 : in  std_logic                      := 'X';             -- lock
			uav_debugaccess          : in  std_logic                      := 'X';             -- debugaccess
			av_address               : out std_logic_vector(23 downto 0);                     -- address
			av_write                 : out std_logic;                                         -- write
			av_read                  : out std_logic;                                         -- read
			av_readdata              : in  std_logic_vector(511 downto 0) := (others => 'X'); -- readdata
			av_writedata             : out std_logic_vector(511 downto 0);                    -- writedata
			av_beginbursttransfer    : out std_logic;                                         -- beginbursttransfer
			av_burstcount            : out std_logic_vector(0 downto 0);                      -- burstcount
			av_byteenable            : out std_logic_vector(63 downto 0);                     -- byteenable
			av_readdatavalid         : in  std_logic                      := 'X';             -- readdatavalid
			av_waitrequest           : in  std_logic                      := 'X';             -- waitrequest
			av_begintransfer         : out std_logic;                                         -- begintransfer
			av_writebyteenable       : out std_logic_vector(63 downto 0);                     -- writebyteenable
			av_lock                  : out std_logic;                                         -- lock
			av_chipselect            : out std_logic;                                         -- chipselect
			av_clken                 : out std_logic;                                         -- clken
			uav_clken                : in  std_logic                      := 'X';             -- clken
			av_debugaccess           : out std_logic;                                         -- debugaccess
			av_outputenable          : out std_logic;                                         -- outputenable
			uav_response             : out std_logic_vector(1 downto 0);                      -- response
			av_response              : in  std_logic_vector(1 downto 0)   := (others => 'X'); -- response
			uav_writeresponserequest : in  std_logic                      := 'X';             -- writeresponserequest
			uav_writeresponsevalid   : out std_logic;                                         -- writeresponsevalid
			av_writeresponserequest  : out std_logic;                                         -- writeresponserequest
			av_writeresponsevalid    : in  std_logic                      := 'X'              -- writeresponsevalid
		);
	end component altera_merlin_slave_translator;

	signal d0_avl_translator_avalon_universal_master_0_waitrequest   : std_logic;                      -- if0_avl_translator:uav_waitrequest -> d0_avl_translator:uav_waitrequest
	signal d0_avl_translator_avalon_universal_master_0_burstcount    : std_logic_vector(6 downto 0);   -- d0_avl_translator:uav_burstcount -> if0_avl_translator:uav_burstcount
	signal d0_avl_translator_avalon_universal_master_0_writedata     : std_logic_vector(511 downto 0); -- d0_avl_translator:uav_writedata -> if0_avl_translator:uav_writedata
	signal d0_avl_translator_avalon_universal_master_0_address       : std_logic_vector(29 downto 0);  -- d0_avl_translator:uav_address -> if0_avl_translator:uav_address
	signal d0_avl_translator_avalon_universal_master_0_lock          : std_logic;                      -- d0_avl_translator:uav_lock -> if0_avl_translator:uav_lock
	signal d0_avl_translator_avalon_universal_master_0_write         : std_logic;                      -- d0_avl_translator:uav_write -> if0_avl_translator:uav_write
	signal d0_avl_translator_avalon_universal_master_0_read          : std_logic;                      -- d0_avl_translator:uav_read -> if0_avl_translator:uav_read
	signal d0_avl_translator_avalon_universal_master_0_readdata      : std_logic_vector(511 downto 0); -- if0_avl_translator:uav_readdata -> d0_avl_translator:uav_readdata
	signal d0_avl_translator_avalon_universal_master_0_debugaccess   : std_logic;                      -- d0_avl_translator:uav_debugaccess -> if0_avl_translator:uav_debugaccess
	signal d0_avl_translator_avalon_universal_master_0_byteenable    : std_logic_vector(63 downto 0);  -- d0_avl_translator:uav_byteenable -> if0_avl_translator:uav_byteenable
	signal d0_avl_translator_avalon_universal_master_0_readdatavalid : std_logic;                      -- if0_avl_translator:uav_readdatavalid -> d0_avl_translator:uav_readdatavalid

begin

	d0_avl_translator : component altera_merlin_master_translator
		generic map (
			AV_ADDRESS_W                => 30,
			AV_DATA_W                   => 512,
			AV_BURSTCOUNT_W             => 1,
			AV_BYTEENABLE_W             => 64,
			UAV_ADDRESS_W               => 30,
			UAV_BURSTCOUNT_W            => 7,
			USE_READ                    => 1,
			USE_WRITE                   => 1,
			USE_BEGINBURSTTRANSFER      => 1,
			USE_BEGINTRANSFER           => 0,
			USE_CHIPSELECT              => 0,
			USE_BURSTCOUNT              => 1,
			USE_READDATAVALID           => 1,
			USE_WAITREQUEST             => 1,
			USE_READRESPONSE            => 0,
			USE_WRITERESPONSE           => 0,
			AV_SYMBOLS_PER_WORD         => 64,
			AV_ADDRESS_SYMBOLS          => 1,
			AV_BURSTCOUNT_SYMBOLS       => 0,
			AV_CONSTANT_BURST_BEHAVIOR  => 0,
			UAV_CONSTANT_BURST_BEHAVIOR => 0,
			AV_LINEWRAPBURSTS           => 0,
			AV_REGISTERINCOMINGSIGNALS  => 0
		)
		port map (
			clk                      => if0_afi_clk_clk,                                           --                       clk.clk
			reset                    => d0_avl_translator_reset_reset_bridge_in_reset_reset,       --                     reset.reset
			uav_address              => d0_avl_translator_avalon_universal_master_0_address,       -- avalon_universal_master_0.address
			uav_burstcount           => d0_avl_translator_avalon_universal_master_0_burstcount,    --                          .burstcount
			uav_read                 => d0_avl_translator_avalon_universal_master_0_read,          --                          .read
			uav_write                => d0_avl_translator_avalon_universal_master_0_write,         --                          .write
			uav_waitrequest          => d0_avl_translator_avalon_universal_master_0_waitrequest,   --                          .waitrequest
			uav_readdatavalid        => d0_avl_translator_avalon_universal_master_0_readdatavalid, --                          .readdatavalid
			uav_byteenable           => d0_avl_translator_avalon_universal_master_0_byteenable,    --                          .byteenable
			uav_readdata             => d0_avl_translator_avalon_universal_master_0_readdata,      --                          .readdata
			uav_writedata            => d0_avl_translator_avalon_universal_master_0_writedata,     --                          .writedata
			uav_lock                 => d0_avl_translator_avalon_universal_master_0_lock,          --                          .lock
			uav_debugaccess          => d0_avl_translator_avalon_universal_master_0_debugaccess,   --                          .debugaccess
			av_address               => d0_avl_address,                                            --      avalon_anti_master_0.address
			av_waitrequest           => d0_avl_waitrequest,                                        --                          .waitrequest
			av_burstcount            => d0_avl_burstcount,                                         --                          .burstcount
			av_byteenable            => d0_avl_byteenable,                                         --                          .byteenable
			av_beginbursttransfer    => d0_avl_beginbursttransfer,                                 --                          .beginbursttransfer
			av_read                  => d0_avl_read,                                               --                          .read
			av_readdata              => d0_avl_readdata,                                           --                          .readdata
			av_readdatavalid         => d0_avl_readdatavalid,                                      --                          .readdatavalid
			av_write                 => d0_avl_write,                                              --                          .write
			av_writedata             => d0_avl_writedata,                                          --                          .writedata
			av_begintransfer         => '0',                                                       --               (terminated)
			av_chipselect            => '0',                                                       --               (terminated)
			av_lock                  => '0',                                                       --               (terminated)
			av_debugaccess           => '0',                                                       --               (terminated)
			uav_clken                => open,                                                      --               (terminated)
			av_clken                 => '1',                                                       --               (terminated)
			uav_response             => "00",                                                      --               (terminated)
			av_response              => open,                                                      --               (terminated)
			uav_writeresponserequest => open,                                                      --               (terminated)
			uav_writeresponsevalid   => '0',                                                       --               (terminated)
			av_writeresponserequest  => '0',                                                       --               (terminated)
			av_writeresponsevalid    => open                                                       --               (terminated)
		);

	if0_avl_translator : component altera_merlin_slave_translator
		generic map (
			AV_ADDRESS_W                   => 24,
			AV_DATA_W                      => 512,
			UAV_DATA_W                     => 512,
			AV_BURSTCOUNT_W                => 1,
			AV_BYTEENABLE_W                => 64,
			UAV_BYTEENABLE_W               => 64,
			UAV_ADDRESS_W                  => 30,
			UAV_BURSTCOUNT_W               => 7,
			AV_READLATENCY                 => 0,
			USE_READDATAVALID              => 1,
			USE_WAITREQUEST                => 1,
			USE_UAV_CLKEN                  => 0,
			USE_READRESPONSE               => 0,
			USE_WRITERESPONSE              => 0,
			AV_SYMBOLS_PER_WORD            => 64,
			AV_ADDRESS_SYMBOLS             => 0,
			AV_BURSTCOUNT_SYMBOLS          => 0,
			AV_CONSTANT_BURST_BEHAVIOR     => 0,
			UAV_CONSTANT_BURST_BEHAVIOR    => 0,
			AV_REQUIRE_UNALIGNED_ADDRESSES => 0,
			CHIPSELECT_THROUGH_READLATENCY => 0,
			AV_READ_WAIT_CYCLES            => 1,
			AV_WRITE_WAIT_CYCLES           => 0,
			AV_SETUP_WAIT_CYCLES           => 0,
			AV_DATA_HOLD_CYCLES            => 0
		)
		port map (
			clk                      => if0_afi_clk_clk,                                           --                      clk.clk
			reset                    => d0_avl_translator_reset_reset_bridge_in_reset_reset,       --                    reset.reset
			uav_address              => d0_avl_translator_avalon_universal_master_0_address,       -- avalon_universal_slave_0.address
			uav_burstcount           => d0_avl_translator_avalon_universal_master_0_burstcount,    --                         .burstcount
			uav_read                 => d0_avl_translator_avalon_universal_master_0_read,          --                         .read
			uav_write                => d0_avl_translator_avalon_universal_master_0_write,         --                         .write
			uav_waitrequest          => d0_avl_translator_avalon_universal_master_0_waitrequest,   --                         .waitrequest
			uav_readdatavalid        => d0_avl_translator_avalon_universal_master_0_readdatavalid, --                         .readdatavalid
			uav_byteenable           => d0_avl_translator_avalon_universal_master_0_byteenable,    --                         .byteenable
			uav_readdata             => d0_avl_translator_avalon_universal_master_0_readdata,      --                         .readdata
			uav_writedata            => d0_avl_translator_avalon_universal_master_0_writedata,     --                         .writedata
			uav_lock                 => d0_avl_translator_avalon_universal_master_0_lock,          --                         .lock
			uav_debugaccess          => d0_avl_translator_avalon_universal_master_0_debugaccess,   --                         .debugaccess
			av_address               => if0_avl_address,                                           --      avalon_anti_slave_0.address
			av_write                 => if0_avl_write,                                             --                         .write
			av_read                  => if0_avl_read,                                              --                         .read
			av_readdata              => if0_avl_readdata,                                          --                         .readdata
			av_writedata             => if0_avl_writedata,                                         --                         .writedata
			av_beginbursttransfer    => if0_avl_beginbursttransfer,                                --                         .beginbursttransfer
			av_burstcount            => if0_avl_burstcount,                                        --                         .burstcount
			av_byteenable            => if0_avl_byteenable,                                        --                         .byteenable
			av_readdatavalid         => if0_avl_readdatavalid,                                     --                         .readdatavalid
			av_waitrequest           => if0_avl_waitrequest,                                       --                         .waitrequest
			av_begintransfer         => open,                                                      --              (terminated)
			av_writebyteenable       => open,                                                      --              (terminated)
			av_lock                  => open,                                                      --              (terminated)
			av_chipselect            => open,                                                      --              (terminated)
			av_clken                 => open,                                                      --              (terminated)
			uav_clken                => '0',                                                       --              (terminated)
			av_debugaccess           => open,                                                      --              (terminated)
			av_outputenable          => open,                                                      --              (terminated)
			uav_response             => open,                                                      --              (terminated)
			av_response              => "00",                                                      --              (terminated)
			uav_writeresponserequest => '0',                                                       --              (terminated)
			uav_writeresponsevalid   => open,                                                      --              (terminated)
			av_writeresponserequest  => open,                                                      --              (terminated)
			av_writeresponsevalid    => '0'                                                        --              (terminated)
		);

end architecture rtl; -- of mem_if_ddr3_emif_0_example_design_example_sim_e0_mm_interconnect_0
