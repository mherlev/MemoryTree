-- mem_if_ddr3_emif_0_example_design_example_sim.vhd

-- This file was auto-generated from alt_mem_if_ddr3_tg_eds_hw.tcl.  If you edit it your changes
-- will probably be lost.
-- 
-- Generated using ACDS version 14.0 200 at 2016.05.21.21:51:03

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

library std;
use std.textio.all;

library modelsim_lib;
use modelsim_lib.util.all;

library work;
use work.test.all;

entity mem_if_ddr3_emif_0_example_design_example_sim is
end entity mem_if_ddr3_emif_0_example_design_example_sim;

architecture rtl of mem_if_ddr3_emif_0_example_design_example_sim is
	component altera_avalon_clock_source is
		generic (
			CLOCK_RATE : positive := 10;
			CLOCK_UNIT : positive := 1000000
		);
		port (
			clk : out std_logic   -- clk
		);
	end component altera_avalon_clock_source;

	component altera_avalon_reset_source is
		generic (
			ASSERT_HIGH_RESET    : integer := 1;
			INITIAL_RESET_CYCLES : integer := 0
		);
		port (
			reset : out std_logic;        -- reset_n
			clk   : in  std_logic := 'X'  -- clk
		);
	end component altera_avalon_reset_source;

	component mem_if_ddr3_emif_0_example_design_example_sim_e0 is
		port (
			pll_ref_clk              : in    std_logic                     := 'X';             -- clk
			global_reset_n           : in    std_logic                     := 'X';             -- reset_n
			soft_reset_n             : in    std_logic                     := 'X';             -- reset_n
			afi_clk                  : out   std_logic;                                        -- clk
			afi_half_clk             : out   std_logic;                                        -- clk
			afi_reset_n              : out   std_logic;                                        -- reset_n
			mem_a                    : out   std_logic_vector(13 downto 0);                    -- mem_a
			mem_ba                   : out   std_logic_vector(2 downto 0);                     -- mem_ba
			mem_ck                   : out   std_logic_vector(0 downto 0);                     -- mem_ck
			mem_ck_n                 : out   std_logic_vector(0 downto 0);                     -- mem_ck_n
			mem_cke                  : out   std_logic_vector(0 downto 0);                     -- mem_cke
			mem_cs_n                 : out   std_logic_vector(0 downto 0);                     -- mem_cs_n
			mem_dm                   : out   std_logic_vector(7 downto 0);                     -- mem_dm
			mem_ras_n                : out   std_logic_vector(0 downto 0);                     -- mem_ras_n
			mem_cas_n                : out   std_logic_vector(0 downto 0);                     -- mem_cas_n
			mem_we_n                 : out   std_logic_vector(0 downto 0);                     -- mem_we_n
			mem_reset_n              : out   std_logic;                                        -- mem_reset_n
			mem_dq                   : inout std_logic_vector(63 downto 0) := (others => 'X'); -- mem_dq
			mem_dqs                  : inout std_logic_vector(7 downto 0)  := (others => 'X'); -- mem_dqs
			mem_dqs_n                : inout std_logic_vector(7 downto 0)  := (others => 'X'); -- mem_dqs_n
			mem_odt                  : out   std_logic_vector(0 downto 0);                     -- mem_odt
			oct_rzqin                : in    std_logic                     := 'X';             -- rzqin
			local_init_done          : out   std_logic;                                        -- local_init_done
			local_cal_success        : out   std_logic;                                        -- local_cal_success
			local_cal_fail           : out   std_logic;                                        -- local_cal_fail
			local_refresh_req        : in    std_logic                     := 'X';             -- local_refresh_req
			local_refresh_chip       : in    std_logic_vector(0 downto 0)  := (others => 'X'); -- local_refresh_chip
			local_refresh_ack        : out   std_logic;                                        -- local_refresh_ack
			drv_status_pass          : out   std_logic;                                        -- pass
			drv_status_fail          : out   std_logic;                                        -- fail
			drv_status_test_complete : out   std_logic                                         -- test_complete
		);
	end component mem_if_ddr3_emif_0_example_design_example_sim_e0;

	component altera_mem_if_checker_no_ifdef_params is
		generic (
			ENABLE_VCDPLUS          : boolean := false;
			CONTINUE_AFTER_CAL_FAIL : boolean := false
		);
		port (
			clk                  : in std_logic := 'X'; -- clk
			reset_n              : in std_logic := 'X'; -- reset_n
			test_complete        : in std_logic := 'X'; -- test_complete
			fail                 : in std_logic := 'X'; -- fail
			pass                 : in std_logic := 'X'; -- pass
			local_init_done      : in std_logic := 'X'; -- local_init_done
			local_cal_success    : in std_logic := 'X'; -- local_cal_success
			local_cal_fail       : in std_logic := 'X'; -- local_cal_fail
			test_complete_1      : in std_logic := 'X'; -- test_complete
			fail_1               : in std_logic := 'X'; -- fail
			pass_1               : in std_logic := 'X'; -- pass
			local_init_done_1    : in std_logic := 'X'; -- local_init_done
			local_cal_success_1  : in std_logic := 'X'; -- local_cal_success
			local_cal_fail_1     : in std_logic := 'X'; -- local_cal_fail
			test_complete_2      : in std_logic := 'X'; -- test_complete
			fail_2               : in std_logic := 'X'; -- fail
			pass_2               : in std_logic := 'X'; -- pass
			local_init_done_2    : in std_logic := 'X'; -- local_init_done
			local_cal_success_2  : in std_logic := 'X'; -- local_cal_success
			local_cal_fail_2     : in std_logic := 'X'; -- local_cal_fail
			test_complete_3      : in std_logic := 'X'; -- test_complete
			fail_3               : in std_logic := 'X'; -- fail
			pass_3               : in std_logic := 'X'; -- pass
			local_init_done_3    : in std_logic := 'X'; -- local_init_done
			local_cal_success_3  : in std_logic := 'X'; -- local_cal_success
			local_cal_fail_3     : in std_logic := 'X'; -- local_cal_fail
			test_complete_4      : in std_logic := 'X'; -- test_complete
			fail_4               : in std_logic := 'X'; -- fail
			pass_4               : in std_logic := 'X'; -- pass
			local_init_done_4    : in std_logic := 'X'; -- local_init_done
			local_cal_success_4  : in std_logic := 'X'; -- local_cal_success
			local_cal_fail_4     : in std_logic := 'X'; -- local_cal_fail
			test_complete_5      : in std_logic := 'X'; -- test_complete
			fail_5               : in std_logic := 'X'; -- fail
			pass_5               : in std_logic := 'X'; -- pass
			local_init_done_5    : in std_logic := 'X'; -- local_init_done
			local_cal_success_5  : in std_logic := 'X'; -- local_cal_success
			local_cal_fail_5     : in std_logic := 'X'; -- local_cal_fail
			test_complete_6      : in std_logic := 'X'; -- test_complete
			fail_6               : in std_logic := 'X'; -- fail
			pass_6               : in std_logic := 'X'; -- pass
			local_init_done_6    : in std_logic := 'X'; -- local_init_done
			local_cal_success_6  : in std_logic := 'X'; -- local_cal_success
			local_cal_fail_6     : in std_logic := 'X'; -- local_cal_fail
			test_complete_7      : in std_logic := 'X'; -- test_complete
			fail_7               : in std_logic := 'X'; -- fail
			pass_7               : in std_logic := 'X'; -- pass
			local_init_done_7    : in std_logic := 'X'; -- local_init_done
			local_cal_success_7  : in std_logic := 'X'; -- local_cal_success
			local_cal_fail_7     : in std_logic := 'X'; -- local_cal_fail
			test_complete_8      : in std_logic := 'X'; -- test_complete
			fail_8               : in std_logic := 'X'; -- fail
			pass_8               : in std_logic := 'X'; -- pass
			local_init_done_8    : in std_logic := 'X'; -- local_init_done
			local_cal_success_8  : in std_logic := 'X'; -- local_cal_success
			local_cal_fail_8     : in std_logic := 'X'; -- local_cal_fail
			test_complete_9      : in std_logic := 'X'; -- test_complete
			fail_9               : in std_logic := 'X'; -- fail
			pass_9               : in std_logic := 'X'; -- pass
			local_init_done_9    : in std_logic := 'X'; -- local_init_done
			local_cal_success_9  : in std_logic := 'X'; -- local_cal_success
			local_cal_fail_9     : in std_logic := 'X'; -- local_cal_fail
			test_complete_10     : in std_logic := 'X'; -- test_complete
			fail_10              : in std_logic := 'X'; -- fail
			pass_10              : in std_logic := 'X'; -- pass
			local_init_done_10   : in std_logic := 'X'; -- local_init_done
			local_cal_success_10 : in std_logic := 'X'; -- local_cal_success
			local_cal_fail_10    : in std_logic := 'X'; -- local_cal_fail
			test_complete_11     : in std_logic := 'X'; -- test_complete
			fail_11              : in std_logic := 'X'; -- fail
			pass_11              : in std_logic := 'X'; -- pass
			local_init_done_11   : in std_logic := 'X'; -- local_init_done
			local_cal_success_11 : in std_logic := 'X'; -- local_cal_success
			local_cal_fail_11    : in std_logic := 'X'  -- local_cal_fail
		);
	end component altera_mem_if_checker_no_ifdef_params;

	component alt_mem_if_ddr3_mem_model_top_ddr3_mem_if_dm_pins_en_mem_if_dqsn_en is
		generic (
			MEM_IF_ADDR_WIDTH            : integer := 0;
			MEM_IF_ROW_ADDR_WIDTH        : integer := 0;
			MEM_IF_COL_ADDR_WIDTH        : integer := 0;
			MEM_IF_CONTROL_WIDTH         : integer := 0;
			MEM_IF_DQS_WIDTH             : integer := 0;
			MEM_IF_CS_WIDTH              : integer := 0;
			MEM_IF_BANKADDR_WIDTH        : integer := 0;
			MEM_IF_DQ_WIDTH              : integer := 0;
			MEM_IF_CK_WIDTH              : integer := 0;
			MEM_IF_CLK_EN_WIDTH          : integer := 0;
			MEM_TRCD                     : integer := 0;
			MEM_TRTP                     : integer := 0;
			MEM_DQS_TO_CLK_CAPTURE_DELAY : integer := 0;
			MEM_CLK_TO_DQS_CAPTURE_DELAY : integer := 0;
			MEM_IF_ODT_WIDTH             : integer := 0;
			MEM_IF_LRDIMM_RM             : integer := 0;
			MEM_MIRROR_ADDRESSING_DEC    : integer := 0;
			MEM_REGDIMM_ENABLED          : boolean := false;
			MEM_LRDIMM_ENABLED           : boolean := false;
			DEVICE_DEPTH                 : integer := 1;
			MEM_NUMBER_OF_DIMMS          : integer := 1;
			MEM_NUMBER_OF_RANKS_PER_DIMM : integer := 1;
			MEM_GUARANTEED_WRITE_INIT    : boolean := false;
			MEM_VERBOSE                  : boolean := true;
			REFRESH_BURST_VALIDATION     : boolean := false;
			MEM_INIT_EN                  : boolean := false;
			MEM_INIT_FILE                : string  := "";
			DAT_DATA_WIDTH               : integer := 32
		);
		port (
			mem_a       : in    std_logic_vector(13 downto 0) := (others => 'X'); -- mem_a
			mem_ba      : in    std_logic_vector(2 downto 0)  := (others => 'X'); -- mem_ba
			mem_ck      : in    std_logic_vector(0 downto 0)  := (others => 'X'); -- mem_ck
			mem_ck_n    : in    std_logic_vector(0 downto 0)  := (others => 'X'); -- mem_ck_n
			mem_cke     : in    std_logic_vector(0 downto 0)  := (others => 'X'); -- mem_cke
			mem_cs_n    : in    std_logic_vector(0 downto 0)  := (others => 'X'); -- mem_cs_n
			mem_dm      : in    std_logic_vector(7 downto 0)  := (others => 'X'); -- mem_dm
			mem_ras_n   : in    std_logic_vector(0 downto 0)  := (others => 'X'); -- mem_ras_n
			mem_cas_n   : in    std_logic_vector(0 downto 0)  := (others => 'X'); -- mem_cas_n
			mem_we_n    : in    std_logic_vector(0 downto 0)  := (others => 'X'); -- mem_we_n
			mem_reset_n : in    std_logic                     := 'X';             -- mem_reset_n
			mem_dq      : inout std_logic_vector(63 downto 0) := (others => 'X'); -- mem_dq
			mem_dqs     : inout std_logic_vector(7 downto 0)  := (others => 'X'); -- mem_dqs
			mem_dqs_n   : inout std_logic_vector(7 downto 0)  := (others => 'X'); -- mem_dqs_n
			mem_odt     : in    std_logic_vector(0 downto 0)  := (others => 'X')  -- mem_odt
		);
	end component alt_mem_if_ddr3_mem_model_top_ddr3_mem_if_dm_pins_en_mem_if_dqsn_en;

	signal pll_ref_clk_clk_clk              : std_logic;                     -- pll_ref_clk:clk -> [e0:pll_ref_clk, global_reset:clk]
	signal global_reset_reset_reset         : std_logic;                     -- global_reset:reset -> [e0:global_reset_n, e0:soft_reset_n]
	signal e0_afi_clk_clk                   : std_logic;                     -- e0:afi_clk -> t0:clk
	signal e0_afi_reset_reset               : std_logic;                     -- e0:afi_reset_n -> t0:reset_n
	signal e0_drv_status_test_complete      : std_logic;                     -- e0:drv_status_test_complete -> t0:test_complete
	signal e0_drv_status_fail               : std_logic;                     -- e0:drv_status_fail -> t0:fail
	signal e0_drv_status_pass               : std_logic;                     -- e0:drv_status_pass -> t0:pass
	signal e0_emif_status_local_cal_fail    : std_logic;                     -- e0:local_cal_fail -> t0:local_cal_fail
	signal e0_emif_status_local_cal_success : std_logic;                     -- e0:local_cal_success -> t0:local_cal_success
	signal e0_emif_status_local_init_done   : std_logic;                     -- e0:local_init_done -> t0:local_init_done
	signal e0_memory_mem_odt                : std_logic_vector(0 downto 0);  -- e0:mem_odt -> m0:mem_odt
	signal e0_memory_mem_cs_n               : std_logic_vector(0 downto 0);  -- e0:mem_cs_n -> m0:mem_cs_n
	signal e0_memory_mem_a                  : std_logic_vector(13 downto 0); -- e0:mem_a -> m0:mem_a
	signal e0_memory_mem_ck_n               : std_logic_vector(0 downto 0);  -- e0:mem_ck_n -> m0:mem_ck_n
	signal e0_memory_mem_ras_n              : std_logic_vector(0 downto 0);  -- e0:mem_ras_n -> m0:mem_ras_n
	signal e0_memory_mem_cke                : std_logic_vector(0 downto 0);  -- e0:mem_cke -> m0:mem_cke
	signal e0_memory_mem_dqs                : std_logic_vector(7 downto 0);  -- [] -> [e0:mem_dqs, m0:mem_dqs]
	signal e0_memory_mem_we_n               : std_logic_vector(0 downto 0);  -- e0:mem_we_n -> m0:mem_we_n
	signal e0_memory_mem_ba                 : std_logic_vector(2 downto 0);  -- e0:mem_ba -> m0:mem_ba
	signal e0_memory_mem_dq                 : std_logic_vector(63 downto 0); -- [] -> [e0:mem_dq, m0:mem_dq]
	signal e0_memory_mem_ck                 : std_logic_vector(0 downto 0);  -- e0:mem_ck -> m0:mem_ck
	signal e0_memory_mem_reset_n            : std_logic;                     -- e0:mem_reset_n -> m0:mem_reset_n
	signal e0_memory_mem_dm                 : std_logic_vector(7 downto 0);  -- e0:mem_dm -> m0:mem_dm
	signal e0_memory_mem_cas_n              : std_logic_vector(0 downto 0);  -- e0:mem_cas_n -> m0:mem_cas_n
	signal e0_memory_mem_dqs_n              : std_logic_vector(7 downto 0);  -- [] -> [e0:mem_dqs_n, m0:mem_dqs_n]

	
	signal pat0_uart_tx_reg : std_logic_vector(7 downto 0);
	signal pat0_uart_tx_status_reg : std_logic;


	signal pull_down : std_logic;

    file OUTPUT: TEXT open WRITE_MODE is "STD_OUTPUT";
	signal reset,clk80 : std_logic;
	constant PERIOD : time := 12.5 ns;
	constant RESET_TIME : time := 40 ns;
begin
	pll_ref_clk80 : component altera_avalon_clock_source
		generic map (
			CLOCK_RATE => 80000000,
			CLOCK_UNIT => 1
		)
		port map (
			clk => clk80 -- clk.clk
		);
	pll_ref_clk : component altera_avalon_clock_source
		generic map (
			CLOCK_RATE => 100000000,
			CLOCK_UNIT => 1
		)
		port map (
			clk => pll_ref_clk_clk_clk  -- clk.clk
		);

	global_reset : component altera_avalon_reset_source
		generic map (
			ASSERT_HIGH_RESET    => 0,
			INITIAL_RESET_CYCLES => 5
		)
		port map (
			reset => global_reset_reset_reset, -- reset.reset_n
			clk   => pll_ref_clk_clk_clk       --   clk.clk
		);

	e0 : component mem_if_ddr3_emif_0_example_design_example_sim_e0
		port map (
			pll_ref_clk              => pll_ref_clk_clk_clk,              --  pll_ref_clk.clk
			global_reset_n           => global_reset_reset_reset,         -- global_reset.reset_n
			soft_reset_n             => global_reset_reset_reset,         --   soft_reset.reset_n
			afi_clk                  => e0_afi_clk_clk,                   --      afi_clk.clk
			afi_half_clk             => open,                             -- afi_half_clk.clk
			afi_reset_n              => e0_afi_reset_reset,               --    afi_reset.reset_n
			mem_a                    => e0_memory_mem_a,                  --       memory.mem_a
			mem_ba                   => e0_memory_mem_ba,                 --             .mem_ba
			mem_ck                   => e0_memory_mem_ck,                 --             .mem_ck
			mem_ck_n                 => e0_memory_mem_ck_n,               --             .mem_ck_n
			mem_cke                  => e0_memory_mem_cke,                --             .mem_cke
			mem_cs_n                 => e0_memory_mem_cs_n,               --             .mem_cs_n
			mem_dm                   => e0_memory_mem_dm,                 --             .mem_dm
			mem_ras_n                => e0_memory_mem_ras_n,              --             .mem_ras_n
			mem_cas_n                => e0_memory_mem_cas_n,              --             .mem_cas_n
			mem_we_n                 => e0_memory_mem_we_n,               --             .mem_we_n
			mem_reset_n              => e0_memory_mem_reset_n,            --             .mem_reset_n
			mem_dq                   => e0_memory_mem_dq,                 --             .mem_dq
			mem_dqs                  => e0_memory_mem_dqs,                --             .mem_dqs
			mem_dqs_n                => e0_memory_mem_dqs_n,              --             .mem_dqs_n
			mem_odt                  => e0_memory_mem_odt,                --             .mem_odt
			oct_rzqin                => open,                             --          oct.rzqin
			local_init_done          => e0_emif_status_local_init_done,   --  emif_status.local_init_done
			local_cal_success        => e0_emif_status_local_cal_success, --             .local_cal_success
			local_cal_fail           => e0_emif_status_local_cal_fail,    --             .local_cal_fail
			local_refresh_req        => '0',                              -- user_refresh.local_refresh_req
			local_refresh_chip       => "0",                              --             .local_refresh_chip
			local_refresh_ack        => open,                             --             .local_refresh_ack
			drv_status_pass          => e0_drv_status_pass,               --   drv_status.pass
			drv_status_fail          => e0_drv_status_fail,               --             .fail
			drv_status_test_complete => e0_drv_status_test_complete       --             .test_complete
		);

	t0 : component altera_mem_if_checker_no_ifdef_params
		generic map (
			ENABLE_VCDPLUS          => false,
			CONTINUE_AFTER_CAL_FAIL => false
		)
		port map (
			clk                  => e0_afi_clk_clk,                   --   avl_clock.clk
			reset_n              => e0_afi_reset_reset,               --   avl_reset.reset_n
			test_complete        => e0_drv_status_test_complete,      --  drv_status.test_complete
			fail                 => e0_drv_status_fail,               --            .fail
			pass                 => e0_drv_status_pass,               --            .pass
			local_init_done      => e0_emif_status_local_init_done,   -- emif_status.local_init_done
			local_cal_success    => e0_emif_status_local_cal_success, --            .local_cal_success
			local_cal_fail       => e0_emif_status_local_cal_fail,    --            .local_cal_fail
			test_complete_1      => '1',                              -- (terminated)
			fail_1               => '0',                              -- (terminated)
			pass_1               => '1',                              -- (terminated)
			local_init_done_1    => '1',                              -- (terminated)
			local_cal_success_1  => '1',                              -- (terminated)
			local_cal_fail_1     => '0',                              -- (terminated)
			test_complete_2      => '1',                              -- (terminated)
			fail_2               => '0',                              -- (terminated)
			pass_2               => '1',                              -- (terminated)
			local_init_done_2    => '1',                              -- (terminated)
			local_cal_success_2  => '1',                              -- (terminated)
			local_cal_fail_2     => '0',                              -- (terminated)
			test_complete_3      => '1',                              -- (terminated)
			fail_3               => '0',                              -- (terminated)
			pass_3               => '1',                              -- (terminated)
			local_init_done_3    => '1',                              -- (terminated)
			local_cal_success_3  => '1',                              -- (terminated)
			local_cal_fail_3     => '0',                              -- (terminated)
			test_complete_4      => '1',                              -- (terminated)
			fail_4               => '0',                              -- (terminated)
			pass_4               => '1',                              -- (terminated)
			local_init_done_4    => '1',                              -- (terminated)
			local_cal_success_4  => '1',                              -- (terminated)
			local_cal_fail_4     => '0',                              -- (terminated)
			test_complete_5      => '1',                              -- (terminated)
			fail_5               => '0',                              -- (terminated)
			pass_5               => '1',                              -- (terminated)
			local_init_done_5    => '1',                              -- (terminated)
			local_cal_success_5  => '1',                              -- (terminated)
			local_cal_fail_5     => '0',                              -- (terminated)
			test_complete_6      => '1',                              -- (terminated)
			fail_6               => '0',                              -- (terminated)
			pass_6               => '1',                              -- (terminated)
			local_init_done_6    => '1',                              -- (terminated)
			local_cal_success_6  => '1',                              -- (terminated)
			local_cal_fail_6     => '0',                              -- (terminated)
			test_complete_7      => '1',                              -- (terminated)
			fail_7               => '0',                              -- (terminated)
			pass_7               => '1',                              -- (terminated)
			local_init_done_7    => '1',                              -- (terminated)
			local_cal_success_7  => '1',                              -- (terminated)
			local_cal_fail_7     => '0',                              -- (terminated)
			test_complete_8      => '1',                              -- (terminated)
			fail_8               => '0',                              -- (terminated)
			pass_8               => '1',                              -- (terminated)
			local_init_done_8    => '1',                              -- (terminated)
			local_cal_success_8  => '1',                              -- (terminated)
			local_cal_fail_8     => '0',                              -- (terminated)
			test_complete_9      => '1',                              -- (terminated)
			fail_9               => '0',                              -- (terminated)
			pass_9               => '1',                              -- (terminated)
			local_init_done_9    => '1',                              -- (terminated)
			local_cal_success_9  => '1',                              -- (terminated)
			local_cal_fail_9     => '0',                              -- (terminated)
			test_complete_10     => '1',                              -- (terminated)
			fail_10              => '0',                              -- (terminated)
			pass_10              => '1',                              -- (terminated)
			local_init_done_10   => '1',                              -- (terminated)
			local_cal_success_10 => '1',                              -- (terminated)
			local_cal_fail_10    => '0',                              -- (terminated)
			test_complete_11     => '1',                              -- (terminated)
			fail_11              => '0',                              -- (terminated)
			pass_11              => '1',                              -- (terminated)
			local_init_done_11   => '1',                              -- (terminated)
			local_cal_success_11 => '1',                              -- (terminated)
			local_cal_fail_11    => '0'                               -- (terminated)
		);

	m0 : component alt_mem_if_ddr3_mem_model_top_ddr3_mem_if_dm_pins_en_mem_if_dqsn_en
		generic map (
			MEM_IF_ADDR_WIDTH            => 14,
			MEM_IF_ROW_ADDR_WIDTH        => 14,
			MEM_IF_COL_ADDR_WIDTH        => 10,
			MEM_IF_CONTROL_WIDTH         => 1,
			MEM_IF_DQS_WIDTH             => 8,
			MEM_IF_CS_WIDTH              => 1,
			MEM_IF_BANKADDR_WIDTH        => 3,
			MEM_IF_DQ_WIDTH              => 64,
			MEM_IF_CK_WIDTH              => 1,
			MEM_IF_CLK_EN_WIDTH          => 1,
			MEM_TRCD                     => 11,
			MEM_TRTP                     => 6,
			MEM_DQS_TO_CLK_CAPTURE_DELAY => 100,
			MEM_CLK_TO_DQS_CAPTURE_DELAY => 100000,
			MEM_IF_ODT_WIDTH             => 1,
			MEM_IF_LRDIMM_RM             => 0,
			MEM_MIRROR_ADDRESSING_DEC    => 0,
			MEM_REGDIMM_ENABLED          => false,
			MEM_LRDIMM_ENABLED           => false,
			DEVICE_DEPTH                 => 1,
			MEM_NUMBER_OF_DIMMS          => 1,
			MEM_NUMBER_OF_RANKS_PER_DIMM => 1,
			MEM_GUARANTEED_WRITE_INIT    => false,
			MEM_VERBOSE                  => true,
			REFRESH_BURST_VALIDATION     => false,
			MEM_INIT_EN                  => false,
			MEM_INIT_FILE                => "",
			DAT_DATA_WIDTH               => 32
		)
		port map (
			mem_a       => e0_memory_mem_a,       -- memory.mem_a
			mem_ba      => e0_memory_mem_ba,      --       .mem_ba
			mem_ck      => e0_memory_mem_ck,      --       .mem_ck
			mem_ck_n    => e0_memory_mem_ck_n,    --       .mem_ck_n
			mem_cke     => e0_memory_mem_cke,     --       .mem_cke
			mem_cs_n    => e0_memory_mem_cs_n,    --       .mem_cs_n
			mem_dm      => e0_memory_mem_dm,      --       .mem_dm
			mem_ras_n   => e0_memory_mem_ras_n,   --       .mem_ras_n
			mem_cas_n   => e0_memory_mem_cas_n,   --       .mem_cas_n
			mem_we_n    => e0_memory_mem_we_n,    --       .mem_we_n
			mem_reset_n => e0_memory_mem_reset_n, --       .mem_reset_n
			mem_dq      => e0_memory_mem_dq,      --       .mem_dq
			mem_dqs     => e0_memory_mem_dqs,     --       .mem_dqs
			mem_dqs_n   => e0_memory_mem_dqs_n,   --       .mem_dqs_n
			mem_odt     => e0_memory_mem_odt      --       .mem_odt
		);



    pat0_uart_spy : process
        variable buf: LINE;
        constant CORE_ID : STRING (10 downto 1):="PAT0: at: ";
        variable i : integer := 0;
    begin
		init_signal_spy("/mem_if_ddr3_emif_0_example_design_example_sim/e0/aegean/pat0/iocomp/patmosMasterUart/txQueue/io_enq_valid","/mem_if_ddr3_emif_0_example_design_example_sim/pat0_uart_tx_status_reg");
--        init_signal_spy("/aegean_testbench/top/cmp/pat0/iocomp/patmosMasterUart/txQueue/io_enq_valid","/aegean_testbench/pat0_uart_tx_status_reg");
		init_signal_spy("/mem_if_ddr3_emif_0_example_design_example_sim/e0/aegean/pat0/iocomp/patmosMasterUart/txQueue/io_enq_bits","/mem_if_ddr3_emif_0_example_design_example_sim/pat0_uart_tx_reg");

--        init_signal_spy("/aegean_testbench/top/cmp/pat0/iocomp/patmosMasterUart/txQueue/io_enq_bits","/aegean_testbench/pat0_uart_tx_reg");
        write(buf,CORE_ID);
        loop
            wait until rising_edge(pat0_uart_tx_status_reg);
            if i = 0 then
                write(buf,time'image(NOW) & " : ");
                --write(buf,real'image(real(NOW/time'val(1000000))/1000.0) & " us : ");
            end if;
            write(buf,character'val(to_integer(unsigned(pat0_uart_tx_reg))));
            i := i + 1;
            --writeline(OUTPUT,buf);
            if to_integer(unsigned(pat0_uart_tx_reg)) = 10 then
                writeline(OUTPUT,buf);
                i := 0;
                write(buf,CORE_ID);
            end if;
        end loop;
    end process ; -- pat0_uart_spy


    -- Add uart ticker to increase the UART speed to reduce simulation time
    baud_inc : process
    begin
        loop
            wait until rising_edge(clk80);
            	signal_force(	"/mem_if_ddr3_emif_0_example_design_example_sim/e0/aegean/pat0/iocomp/patmosMasterUart/tx_baud_tick",
		   						"1",
								0 ns,
								freeze,
		   						open, 
								0);
          	wait until rising_edge(clk80);
            	signal_force(	"/mem_if_ddr3_emif_0_example_design_example_sim/e0/aegean/pat0/iocomp/patmosMasterUart/tx_baud_tick", "0", 0 ns, freeze, open, 0);
            wait for 3*PERIOD;
        end loop;
    end process ; -- baud_inc





end architecture rtl; -- of mem_if_ddr3_emif_0_example_design_example_sim
