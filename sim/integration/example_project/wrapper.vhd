-- mem_if_ddr3_emif_0_example_design_example_sim_e0.vhd

-- This file was auto-generated from alt_mem_if_ddr3_tg_ed_hw.tcl.  If you edit it your changes
-- will probably be lost.
-- 
-- Generated using ACDS version 14.0 200 at 2016.05.21.21:51:05

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
library work;
library work;
use work.MemoryTreePackage.all;
use work.root_package.all;
use work.ocp.all;
use work.avalon.all;

entity noc_wrapper is
	port (
	clk	: in std_logic;
	rst_n : in std_logic;
	avl_addr : out std_logic_vector(23 downto 0);
	avl_be   : out std_logic_vector(63 downto 0);
    avl_burstbegin	: out std_logic;
    avl_read_req	: out std_logic;
    avl_size		: out std_logic;
    avl_wdata		: out std_logic_vector(511 downto 0);
    avl_write_req	: out std_logic;
	avl_rdata       : in std_logic_vector(511 downto 0);
    avl_rdata_valid	: in std_logic;
    avl_ready		: in std_logic;
	cal_done	: in std_logic;
	cal_success : in std_logic;
 	ref	: out std_logic;
	ref_ack : in std_logic;
	ok : out std_logic;
);
end entity noc_wrapper;

architecture rtl of noc_wrapper is
	signal r2l_root_port : phit_r;
	signal r2l_leaf_ports : phit_arr;
	signal l2r_root_port : phit_r;
	signal l2r_leaf_ports : phit_arr;
	type ocp_m_array is array (0 to number_of_leafs-1) of ocp_burst_m;
	signal ocp_m : ocp_m_array;
	type ocp_s_array is array (0 to number_of_leafs-1) of ocp_burst_s;
	signal ocp_s : ocp_s_array;
	
	signal mem_m : ocp_mem_m;
	signal mem_s : ocp_mem_s;
	signal avl_mem_m : avl_m;
	signal avl_mem_s : avl_s;
	signal reset : std_logic;
--	signal ref, ref_ack : std_logic;

begin
	reset <= not rst_n;
	avl_addr <= avl_mem_m.addr;
	avl_be(63 downto AVL_BYTE_WIDTH) <= (others => '0');
	avl_be(AVL_BYTE_WIDTH-1 downto 0) <= avl_mem_m.be;
	avl_burstbegin <= avl_mem_m.burstbegin;
	avl_read_req <= avl_mem_m.read_req;
	avl_size <= avl_mem_m.size;
	avl_wdata(511 downto AVL_DATA_WIDTH) <= (others => '0');
	avl_wdata(AVL_DATA_WIDTH-1 downto 0) <= avl_mem_m.wdata; 
	avl_write_req <= avl_mem_m.write_req;
	
	avl_mem_s.rdata <= avl_rdata(AVL_DATA_WIDTH-1 downto 0);
	avl_mem_s.rdata_valid <= avl_rdata_valid;
	avl_mem_s.ready <= avl_ready;






	
	r2lnoc : entity work.r2l_noc
	port map (clk,r2l_root_port,r2l_leaf_ports);
	l2rnoc : entity work.l2r_noc
	port map (clk,l2r_root_port,l2r_leaf_ports);
	
	root_module : entity work.root
	port map (clk,reset,r2l_root_port,l2r_root_port,mem_m,mem_s,avl_mem_m,avl_mem_s,cal_done,cal_success, ref, ref_ack);
  
	

	leafs : for i in 0 to number_of_leafs-1 generate
		leaf_node : entity work.network_adapter
		generic map(i)
		port map(clk,reset,r2l_leaf_ports(i),l2r_leaf_ports(i),ocp_m(i),ocp_s(i));
	end generate;
  
	burstmodule : for i in 1 to number_of_leafs-1 generate
		ocpburst : entity work.ocpburst_testbench
		port map(clk,reset, ocp_m(i), ocp_s(i),open);
	end generate;
 	ocpburst : entity work.ocpburst_testbench
	port map(clk,reset, ocp_m(i), ocp_s(i),ok);

end architecture rtl; -- of noc_wrapper
